{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"26e83b35041dcbb3cf3d3a07f0b07c79db91c636","modified":1509780824000},{"_id":"source/.DS_Store","hash":"f1017cfc40656f43ad7b237f373cb3252d75beea","modified":1510113934000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1509787162000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1509787162000},{"_id":"themes/next/.DS_Store","hash":"59d6218ef7e9a3b700dd3f20d5b8f59c0a062740","modified":1510121554000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1509787162000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1509787162000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1509787162000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1509787162000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1509787162000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1509787162000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1509787162000},{"_id":"themes/next/_config.yml","hash":"7ae2496267ecb01cd2c5c59e098fc022b82da1de","modified":1510127563000},{"_id":"themes/next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1509787162000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1509787162000},{"_id":"themes/next/README.md","hash":"529d53dfa97678f8ce4c95620b26e61154162a29","modified":1509787162000},{"_id":"themes/next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1509787162000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1509787162000},{"_id":"themes/next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1509787162000},{"_id":"source/_posts/qr-droid.md","hash":"fa05fe7754ee5cc95c28196ba08163f144651585","modified":1509959164000},{"_id":"source/_posts/iOS布局与Masnory使用实践.md","hash":"48adf6139033774a3eaee14ce45e5ba867a52f2e","modified":1509967631000},{"_id":"source/categories/index.md","hash":"8106f5463258e046e29b9abb2799feadbd940853","modified":1509959161000},{"_id":"source/about/index.md","hash":"b0fbd860f1971dbe138af9852abc029bbae9e5fc","modified":1510127114000},{"_id":"source/tags/index.md","hash":"cbb281b952d70e2085466b7e8b82b7d7b5c7aaa6","modified":1509959159000},{"_id":"source/images/avatar.jpg","hash":"3ebd802fa5bda8a97ba595749e5c03bef8d2a49f","modified":1510114058000},{"_id":"source/schedule/index.md","hash":"5d1c387ac03b1ebddc9bf33e04aec5edac49fa61","modified":1509959161000},{"_id":"themes/next/.git/FETCH_HEAD","hash":"b6438c1d94a2834c02c298e27fe05c2dafeac181","modified":1510147912000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1509787162000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1509787162000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1509786980000},{"_id":"themes/next/.git/index","hash":"daf24b212f6565664880caffe1f7af1bf77a9eb6","modified":1509956722000},{"_id":"themes/next/.git/packed-refs","hash":"9d29a8e4f61747ca4478d7d80980001d1f0689f4","modified":1509787162000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1509787162000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1509787162000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1509787162000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1509787162000},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1509787162000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1509787162000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1509787162000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1509787162000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1509787162000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1509787162000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1509787162000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1509787162000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1509787162000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1509787162000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1509787162000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1509787162000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1509787162000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1509787162000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1509787162000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1509787162000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1509787162000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1509787162000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1509787162000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1509787162000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1509787162000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1509787162000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1509787162000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1509787162000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1509787162000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1509787162000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1509787162000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1509787162000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509787162000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1509786980000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1509786980000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1509786980000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1509786980000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1509786980000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1509786980000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1509786980000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1509786980000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1509786980000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1509786980000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1509786980000},{"_id":"themes/next/.git/logs/HEAD","hash":"a332132e58ab872f195bda48a399995300ba7c27","modified":1509787162000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1509787162000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1509787162000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1509787162000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1509787162000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1509787162000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1509787162000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1509787162000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1509787162000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1509787162000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1509787162000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1509787162000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1509787162000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1509787162000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1509787162000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1509787162000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1509787162000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1509787162000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1509787162000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1509787162000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1509787162000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1509787162000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1509787162000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1509787162000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1509787162000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1509787162000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1509787162000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1509787162000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1509787162000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1509787162000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1509787162000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1509787162000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1509787162000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1509787162000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1509787162000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1509787162000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1509787162000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1509787162000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1509787162000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1509787162000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1509787162000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1509787162000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1509787162000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1509787162000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1509787162000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1509787162000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1509787162000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1509787162000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1509787162000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1509787162000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1509787162000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1509787162000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1509787162000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1509787162000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509787162000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509787162000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509787162000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509787162000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509787162000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509787162000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509787162000},{"_id":"themes/next/.git/objects/14/2872b02537f1ea9db00852b40c378260348eac","hash":"8bafe4c9a78df46542d415ce49018538c5044366","modified":1509956246000},{"_id":"themes/next/.git/refs/heads/master","hash":"0cadb401e901309811e8fd2e4b95e3aea1b35635","modified":1509787162000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1509787162000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1509787162000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1509787162000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1509787162000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1509787162000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1509787162000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1509787162000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1509787162000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1509787162000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1509787162000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1509787162000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1509787162000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1509787162000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1509787162000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1509787162000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1509787162000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1509787162000},{"_id":"themes/next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1509787162000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1509787162000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1509787162000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1509787162000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1509787162000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1509787162000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1509787162000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1509787162000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1509787162000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1509787162000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1509787162000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1509787162000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1509787162000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1509787162000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1509787162000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1509787162000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1509787162000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1509787162000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1509787162000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1509787162000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1509787162000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1509787162000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1509787162000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1509787162000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1509787162000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1509787162000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1509787162000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1509787162000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1509787162000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1509787162000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1509787162000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1509787162000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1509787162000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1509787162000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1509787162000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1509787162000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1509787162000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1509787162000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1509787162000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1509787162000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1509787162000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1509787162000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1509787162000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1509787162000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1509787162000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1509787162000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1509787162000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1509787162000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1509787162000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1509787162000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1509787162000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1509787162000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1509787162000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1509787162000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1509787162000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1509787162000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1509787162000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4617daf810f42b3f3908a40f246538cb1e5970da","modified":1509787162000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1509787162000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1509787162000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1509787162000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1509787162000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1509787162000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1509787162000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1509787162000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1509787162000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1509787162000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"a332132e58ab872f195bda48a399995300ba7c27","modified":1509787162000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1509787162000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1509787162000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1509787162000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1509787162000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1509787162000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1509787162000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1509787162000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1509787162000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1509787162000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1509787162000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1509787162000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1509787162000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1509787162000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1509787162000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1509787162000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1509787162000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1509787162000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1509787162000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1509787162000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1509787162000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"a332132e58ab872f195bda48a399995300ba7c27","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1509787162000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1509787162000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1509787162000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1509787162000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1509787162000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1509787162000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1509787162000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1509787162000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1509787162000},{"_id":"themes/next/.git/objects/pack/pack-711d6d90d2e2cb965c27bdda21e6efdc63b7ab29.idx","hash":"6f6a953294274b5794c6648b1b4aefd9b4c74364","modified":1509787162000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1509787162000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1509787162000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1509787162000},{"_id":"themes/next/.git/objects/pack/pack-711d6d90d2e2cb965c27bdda21e6efdc63b7ab29.pack","hash":"6457bef4035cde198b544666aa59841ea2816c06","modified":1509787162000}],"Category":[{"name":"iOS 开发","_id":"cj9r4ahly00042npwpy3n6ohc"},{"name":"iOS 自动布局","_id":"cj9r4ahmb00082npw92gprau6"}],"Data":[],"Page":[{"title":"categories","date":"2017-11-06T06:45:48.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-11-06 14:45:48\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-11-06T09:06:01.000Z","path":"categories/index.html","layout":"page","_id":"cj9r4ahlk00012npw06ntmt2t","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2017-11-06T08:30:54.000Z","type":"about","comments":0,"_content":"这里是leverTsui的个人技术博客，\n欢迎常来^^。","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-11-06 16:30:54\ntype: \"about\"\ncomments: false\n---\n这里是leverTsui的个人技术博客，\n欢迎常来^^。","updated":"2017-11-08T07:45:14.000Z","path":"about/index.html","layout":"page","_id":"cj9r4ahls00032npwr1myaucy","content":"<p>这里是leverTsui的个人技术博客，<br>欢迎常来^^。</p>","site":{"data":{}},"excerpt":"","more":"<p>这里是leverTsui的个人技术博客，<br>欢迎常来^^。</p>"},{"title":"tags","date":"2017-11-06T06:41:10.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-11-06 14:41:10\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-11-06T09:05:59.000Z","path":"tags/index.html","layout":"page","_id":"cj9r4ahm600062npw2nyty131","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2017-11-06T08:31:04.000Z","type":"schedule","comments":0,"_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2017-11-06 16:31:04\ntype: \"schedule\"\ncomments: false\n---\n","updated":"2017-11-06T09:06:01.000Z","path":"schedule/index.html","layout":"page","_id":"cj9r4ahm800072npw6ghniuaj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"iOS二维码识别/二维码生成","author":"leveltsui","date":"2017-11-03T12:42:00.000Z","_content":"#### 前言\n之前做过一个关于二维码的组件，已发布，现总结下。\n开发的`APP`所需支持的最低版本为`8.0`，最初的方案为扫描使用苹果自带的`API`实现扫一扫的功能、使用`ZXing`识别从相册或别人转发的二维码图片。但发现`ZXing`识别从相册中来的图片性能很差，很多图片识别不了，且耗时较长，遂使用`ZBar`来实现识别从相册或别人转发的二维码图片。 \n这个组件重要实现了三个功能，扫一扫识别二维码图片、长按图片识别二维码图片和生成二维码图片。\n首先来看下扫一扫识别二维码图片的代码实现：\n\n#### 功能实现\n##### 扫一扫识别二维码图片 \n```objc\n- (void)initCapture {\n    AVCaptureDevice* inputDevice =\n    [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo]; \n    [inputDevice lockForConfiguration:nil];\n    if ([inputDevice hasTorch]){\n        inputDevice.torchMode = AVCaptureTorchModeAuto;\n    }\n    AVCaptureFocusMode foucusMode = AVCaptureFocusModeContinuousAutoFocus;\n    if ([inputDevice isFocusModeSupported:foucusMode]) {\n        inputDevice.focusMode = foucusMode;\n    }\n    [inputDevice unlockForConfiguration];\n    \n    AVCaptureDeviceInput *captureInput =\n    [AVCaptureDeviceInput deviceInputWithDevice:inputDevice error:nil];\n    \n    if (!captureInput) {\n        //支持的最低版本为iOS8\n        UIAlertController *alterVC = [UIAlertController alertControllerWithTitle:MUIQRCodeLocalizedString(@\"ScanViewController_system_tip\") message:MUIQRCodeLocalizedString(@\"ScanViewController_camera_permission\") preferredStyle:UIAlertControllerStyleAlert];\n        UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:MUIQRCodeLocalizedString(@\"ScanViewController_yes\") style:UIAlertActionStyleDefault handler:nil];\n        [alterVC addAction:confirmAction];\n        [self presentViewController:alterVC animated:YES completion:nil];\n        [self.activityView stopAnimating];\n        [self onVideoStart:nil];\n        return;\n    }\n    \n    AVCaptureMetadataOutput *captureOutput = [[AVCaptureMetadataOutput alloc] init];\n    [captureOutput setMetadataObjectsDelegate:self queue:_queue];\n    self.captureOutput = captureOutput;\n    \n    self.captureSession = [[AVCaptureSession alloc] init];\n    [self.captureSession addInput:captureInput];\n    [self.captureSession addOutput:captureOutput];\n    \n    CGFloat w = 1920.f;\n    CGFloat h = 1080.f;\n    if ([self.captureSession canSetSessionPreset:AVCaptureSessionPreset1920x1080]) {\n        self.captureSession.sessionPreset = AVCaptureSessionPreset1920x1080;\n    } else if ([self.captureSession canSetSessionPreset:AVCaptureSessionPreset1280x720]) {\n        self.captureSession.sessionPreset = AVCaptureSessionPreset1280x720;\n        w = 1280.f;\n        h = 720.f;\n    } else if ([self.captureSession canSetSessionPreset:AVCaptureSessionPreset640x480]) {\n        self.captureSession.sessionPreset = AVCaptureSessionPreset640x480;\n        w = 960.f;\n        h = 540.f;\n    }\n    captureOutput.metadataObjectTypes = [captureOutput availableMetadataObjectTypes];\n    CGRect bounds = [[UIScreen mainScreen] bounds];\n    \n    if (!self.prevLayer) {\n        self.prevLayer = [AVCaptureVideoPreviewLayer layerWithSession:self.captureSession];\n    }\n    self.prevLayer.frame = bounds;\n    self.prevLayer.videoGravity = AVLayerVideoGravityResizeAspectFill;\n    [self.view.layer insertSublayer:self.prevLayer atIndex:0];\n    //下面代码主要用来设置扫描的聚焦范围，计算rectOfInterest\n    CGFloat p1 = bounds.size.height/bounds.size.width;\n    CGFloat p2 = w/h;\n    \n    CGRect cropRect = CGRectMake(CGRectGetMinX(_cropRect) - kSNReaderScanExpandWidth, CGRectGetMinY(_cropRect) - kSNReaderScanExpandHeight, CGRectGetWidth(_cropRect) + 2*kSNReaderScanExpandWidth, CGRectGetHeight(_cropRect) + 2*kSNReaderScanExpandHeight);\n    \n//    CGRect cropRect = _cropRect;\n    if (fabs(p1 - p2) < 0.00001) {\n        captureOutput.rectOfInterest = CGRectMake(cropRect.origin.y /bounds.size.height,                         cropRect.origin.x/bounds.size.width,\n                                                  cropRect.size.height/bounds.size.height,\n                                                  cropRect.size.width/bounds.size.width);\n    } else if (p1 < p2) {\n        //实际图像被截取一段高\n        CGFloat fixHeight = bounds.size.width * w / h;\n        CGFloat fixPadding = (fixHeight - bounds.size.height)/2;\n        captureOutput.rectOfInterest = CGRectMake((cropRect.origin.y + fixPadding)/fixHeight,\n                                                  cropRect.origin.x/bounds.size.width,\n                                                  cropRect.size.height/fixHeight,\n                                                  cropRect.size.width/bounds.size.width);\n    } else {\n        CGFloat fixWidth = bounds.size.height * h / w;\n        CGFloat fixPadding = (fixWidth - bounds.size.width)/2;\n        captureOutput.rectOfInterest = CGRectMake(cropRect.origin.y/bounds.size.height,\n                                                  (cropRect.origin.x + fixPadding)/fixWidth,\n                                                  cropRect.size.height/bounds.size.height,\n                                                  cropRect.size.width/fixWidth);\n    }\n}\n```\n\n##### 识别二维码图片\n识别二维码图片的功能，最初的方案是使用三方库`ZXing`来实现，因为`ZXing`有人在维护，但`ZXing`识别相册中的二维码图片或本地的图片时，有些图片根本就识别不出来，且耗时较长，所以改为使用`ZBar`。在网上找到一篇文章[再见ZXing 使用系统原生代码处理QRCode](http://adad184.com/2015/09/30/goodbye-zxing/),实测发现使用系统原生代码来识别二维码图片时，在，iphone4s，系统为iOS9的手机发现传回来的数组为空。代码如下：\n```objc \n- (NSString *)decodeQRImageWith:(UIImage*)aImage {\n    NSString *qrResult = nil; \n    //iOS8及以上可以使用系统自带的识别二维码图片接口，但此api有问题，在一些机型上detector为nil。 \n    if (iOS8_OR_LATER) { \n          CIContext *context = [CIContext contextWithOptions:nil];\n          CIDetector *detector = [CIDetector detectorOfType:CIDetectorTypeQRCode context:context options:@{CIDetectorAccuracy:CIDetectorAccuracyHigh}];\n          CIImage *image = [CIImage imageWithCGImage:aImage.CGImage];\n          NSArray *features = [detector featuresInImage:image];\n          CIQRCodeFeature *feature = [features firstObject]; \n          qrResult = feature.messageString;\n      } else {\n          ZBarReaderController* read = [ZBarReaderController new];\n          CGImageRef cgImageRef = aImage.CGImage;\n          ZBarSymbol* symbol = nil;\n          for(symbol in [read scanImage:cgImageRef]) break;\n             qrResult = symbol.data ;\n            return qrResult;\n     }\n }\n ```\n\n无图无真相：\n\n![14567CBE-E1D2-4FA7-AFA3-8B2037171F38.jpg](http://upload-images.jianshu.io/upload_images/117999-5dae9fc15755140c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\ndetector的值为nil，也就是说 \n\n```objc     \nCIDetector *detector = [CIDetector detectorOfType:CIDetectorTypeQRCode context:context options:@{CIDetectorAccuracy:CIDetectorAccuracyHigh}];\n```\nCIDetector的初始化方法无效。推测是苹果API的问题。 \n##### 生成二维码图片\n在`iOS8`及以上版本使用苹果的`API`生成二维码图片，代码如下：\n```objc\n- (UIImage *)encodeQRImageWithContent:(NSString *)content size:(CGSize)size {\n    UIImage *codeImage = nil;\n    if (iOS8_OR_LATER) {\n        NSData *stringData = [content dataUsingEncoding: NSUTF8StringEncoding]; \n        //生成\n      CIFilter *qrFilter = [CIFilter filterWithName:@\"CIQRCodeGenerator\"];\n      [qrFilter setValue:stringData forKey:@\"inputMessage\"];\n      [qrFilter setValue:@\"M\" forKey:@\"inputCorrectionLevel\"];\n      UIColor *onColor = [UIColor blackColor];\n      UIColor *offColor = [UIColor whiteColor];\n      //上色\n      CIFilter *colorFilter = [CIFilter filterWithName:@\"CIFalseColor\"\n                                         keysAndValues:\n                               @\"inputImage\",qrFilter.outputImage,\n                               @\"inputColor0\",[CIColor colorWithCGColor:onColor.CGColor],\n                               @\"inputColor1\",[CIColor colorWithCGColor:offColor.CGColor],\n                               nil];\n\n      CIImage *qrImage = colorFilter.outputImage;\n      CGImageRef cgImage = [[CIContext contextWithOptions:nil] createCGImage:qrImage fromRect:qrImage.extent];\n      UIGraphicsBeginImageContext(size);\n      CGContextRef context = UIGraphicsGetCurrentContext();\n      CGContextSetInterpolationQuality(context, kCGInterpolationNone);\n      CGContextScaleCTM(context, 1.0, -1.0);\n      CGContextDrawImage(context, CGContextGetClipBoundingBox(context), cgImage);\n      codeImage = UIGraphicsGetImageFromCurrentImageContext();\n      UIGraphicsEndImageContext(); \n      CGImageRelease(cgImage);\n      } else {\n          codeImage = [QRCodeGenerator qrImageForString:content imageSize:size.width];\n      }\n      return codeImage;\n  }\n```\n`iOS8`以下使用`libqrencode`库来生成二维码图片。\n\n#### 代码完善\n`2015年12月11日` \n\n`QA`测试发现，服务端生成的二维码，使用`ZBar`识别不出来，但将这张图片保存到相册，然后发送就可以识别出来。最初的想法是要服务端修改生成的二维码，但安卓能够识别出来，此路不通，那只有看ZBar的源码了。\n```objc\n- (id <NSFastEnumeration>) scanImage: (CGImageRef) image {\n        timer_start;\n        int nsyms = [self scanImage: image\n                          withScaling: 0];\n      //没有识别出来，判断CGImageRef对象的宽和高是否大于640，大于或等于的话进行缩放再进行扫描\n        if(!nsyms &&\n           CGImageGetWidth(image) >= 640 &&\n           CGImageGetHeight(image) >= 640)\n            // make one more attempt for close up, grainy images\n            nsyms = [self scanImage: image\n                          withScaling: .5];\n\n        NSMutableArray *syms = nil;\n        if(nsyms) {\n            // quality/type filtering\n            int max_quality = MIN_QUALITY;\n            for(ZBarSymbol *sym in scanner.results) {\n                zbar_symbol_type_t type = sym.type;\n                int quality;\n                if(type == ZBAR_QRCODE)\n                    quality = INT_MAX;\n                else\n                    quality = sym.quality;\n\n                if(quality < max_quality) {\n                    zlog(@\"    type=%d quality=%d < %d\\n\",\n                         type, quality, max_quality);\n                    continue;\n                }\n\n                if(max_quality < quality) {\n                    max_quality = quality;\n                    if(syms)\n                        [syms removeAllObjects];\n                }\n                zlog(@\"    type=%d quality=%d\\n\", type, quality);\n                if(!syms)\n                    syms = [NSMutableArray arrayWithCapacity: 1];\n\n                [syms addObject: sym];\n            }\n        }\n\n        zlog(@\"read %d filtered symbols in %gs total\\n\",\n              (!syms) ? 0 : [syms count], timer_elapsed(t_start, timer_now()));\n        return(syms);\n      }\n      if(max_quality < quality) {\n          max_quality = quality;\n          if(syms)\n              [syms removeAllObjects];\n      }\n      zlog(@\"    type=%d quality=%d\\n\", type, quality);\n      if(!syms)\n          syms = [NSMutableArray arrayWithCapacity: 1];\n\n      [syms addObject: sym];\n      }\n  }\n  zlog(@\"read %d filtered symbols in %gs total\\n\",\n        (!syms) ? 0 : [syms count], timer_elapsed(t_start, timer_now()));\n  return(syms);\n}\n```\n\n在这里就产生了一个解决有些二维码图片识别不出来的解决思路：将传过来的`UIImage`的宽和高设置为640，识别不出来再进行缩放识别。修改`UIImage`的代码如下：\n```objc\n-(UIImage *)TransformtoSize:(CGSize)Newsize {\n    // 创建一个bitmap的context\n    UIGraphicsBeginImageContext(Newsize);\n    // 绘制改变大小的图片\n    [self drawInRect:CGRectMake(0, 0, Newsize.width, Newsize.height)];\n    // 从当前context中创建一个改变大小后的图片\n    UIImage *TransformedImg=UIGraphicsGetImageFromCurrentImageContext();\n    // 使当前的context出堆栈\n    UIGraphicsEndImageContext();\n    // 返回新的改变大小后的图片\n    return TransformedImg;\n}\n```\n这样类似于将`ZXing`中的`tryHard`设置为`YES`。识别不出来的二维码图片就可以识别了。\n\n`2016年5月20日`\n`遗留的bug`: 点击进入扫一扫界面，退出，再进入，这样重复5次左右，扫一扫之前的界面的会出现卡顿。\n原因：多次进入扫一扫界面，再退出，因此界面未被系统回收，captureSession对象一直在运行，会造成内存泄露，引起上一个界面卡顿。\n解决方案：在视图将要消失的时候，确保captureSession对象停止运行。\n```objc\n- (void)viewWillDisappear:(BOOL)animated {\n  [super viewWillDisappear:animated];\n  if ([self.captureSession isRunning]) {\n      [self.captureSession stopRunning];\n  }\n}\n```\n#### 小结\n源码和demo请点[这里](https://github.com/hua16/QRCodeDemo.git)\n参考的文章链接如下\n[再见ZXing 使用系统原生代码处理QRCode](http://adad184.com/2015/09/30/goodbye-zxing/)\n[IOS二维码扫描,你需要注意的两件事](http://blog.cnbluebox.com/blog/2014/08/26/ioser-wei-ma-sao-miao/)\n[[Zbar算法流程介绍](http://blog.csdn.net/u013738531/article/details/54574262)](http://blog.csdn.net/u013738531/article/details/54574262)","source":"_posts/qr-droid.md","raw":"title: iOS二维码识别/二维码生成\ntags:\n  - 二维码 图片识别\ncategories:\n  - iOS 开发\nauthor: leveltsui\ndate: 2017-11-03 20:42:00\n---\n#### 前言\n之前做过一个关于二维码的组件，已发布，现总结下。\n开发的`APP`所需支持的最低版本为`8.0`，最初的方案为扫描使用苹果自带的`API`实现扫一扫的功能、使用`ZXing`识别从相册或别人转发的二维码图片。但发现`ZXing`识别从相册中来的图片性能很差，很多图片识别不了，且耗时较长，遂使用`ZBar`来实现识别从相册或别人转发的二维码图片。 \n这个组件重要实现了三个功能，扫一扫识别二维码图片、长按图片识别二维码图片和生成二维码图片。\n首先来看下扫一扫识别二维码图片的代码实现：\n\n#### 功能实现\n##### 扫一扫识别二维码图片 \n```objc\n- (void)initCapture {\n    AVCaptureDevice* inputDevice =\n    [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo]; \n    [inputDevice lockForConfiguration:nil];\n    if ([inputDevice hasTorch]){\n        inputDevice.torchMode = AVCaptureTorchModeAuto;\n    }\n    AVCaptureFocusMode foucusMode = AVCaptureFocusModeContinuousAutoFocus;\n    if ([inputDevice isFocusModeSupported:foucusMode]) {\n        inputDevice.focusMode = foucusMode;\n    }\n    [inputDevice unlockForConfiguration];\n    \n    AVCaptureDeviceInput *captureInput =\n    [AVCaptureDeviceInput deviceInputWithDevice:inputDevice error:nil];\n    \n    if (!captureInput) {\n        //支持的最低版本为iOS8\n        UIAlertController *alterVC = [UIAlertController alertControllerWithTitle:MUIQRCodeLocalizedString(@\"ScanViewController_system_tip\") message:MUIQRCodeLocalizedString(@\"ScanViewController_camera_permission\") preferredStyle:UIAlertControllerStyleAlert];\n        UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:MUIQRCodeLocalizedString(@\"ScanViewController_yes\") style:UIAlertActionStyleDefault handler:nil];\n        [alterVC addAction:confirmAction];\n        [self presentViewController:alterVC animated:YES completion:nil];\n        [self.activityView stopAnimating];\n        [self onVideoStart:nil];\n        return;\n    }\n    \n    AVCaptureMetadataOutput *captureOutput = [[AVCaptureMetadataOutput alloc] init];\n    [captureOutput setMetadataObjectsDelegate:self queue:_queue];\n    self.captureOutput = captureOutput;\n    \n    self.captureSession = [[AVCaptureSession alloc] init];\n    [self.captureSession addInput:captureInput];\n    [self.captureSession addOutput:captureOutput];\n    \n    CGFloat w = 1920.f;\n    CGFloat h = 1080.f;\n    if ([self.captureSession canSetSessionPreset:AVCaptureSessionPreset1920x1080]) {\n        self.captureSession.sessionPreset = AVCaptureSessionPreset1920x1080;\n    } else if ([self.captureSession canSetSessionPreset:AVCaptureSessionPreset1280x720]) {\n        self.captureSession.sessionPreset = AVCaptureSessionPreset1280x720;\n        w = 1280.f;\n        h = 720.f;\n    } else if ([self.captureSession canSetSessionPreset:AVCaptureSessionPreset640x480]) {\n        self.captureSession.sessionPreset = AVCaptureSessionPreset640x480;\n        w = 960.f;\n        h = 540.f;\n    }\n    captureOutput.metadataObjectTypes = [captureOutput availableMetadataObjectTypes];\n    CGRect bounds = [[UIScreen mainScreen] bounds];\n    \n    if (!self.prevLayer) {\n        self.prevLayer = [AVCaptureVideoPreviewLayer layerWithSession:self.captureSession];\n    }\n    self.prevLayer.frame = bounds;\n    self.prevLayer.videoGravity = AVLayerVideoGravityResizeAspectFill;\n    [self.view.layer insertSublayer:self.prevLayer atIndex:0];\n    //下面代码主要用来设置扫描的聚焦范围，计算rectOfInterest\n    CGFloat p1 = bounds.size.height/bounds.size.width;\n    CGFloat p2 = w/h;\n    \n    CGRect cropRect = CGRectMake(CGRectGetMinX(_cropRect) - kSNReaderScanExpandWidth, CGRectGetMinY(_cropRect) - kSNReaderScanExpandHeight, CGRectGetWidth(_cropRect) + 2*kSNReaderScanExpandWidth, CGRectGetHeight(_cropRect) + 2*kSNReaderScanExpandHeight);\n    \n//    CGRect cropRect = _cropRect;\n    if (fabs(p1 - p2) < 0.00001) {\n        captureOutput.rectOfInterest = CGRectMake(cropRect.origin.y /bounds.size.height,                         cropRect.origin.x/bounds.size.width,\n                                                  cropRect.size.height/bounds.size.height,\n                                                  cropRect.size.width/bounds.size.width);\n    } else if (p1 < p2) {\n        //实际图像被截取一段高\n        CGFloat fixHeight = bounds.size.width * w / h;\n        CGFloat fixPadding = (fixHeight - bounds.size.height)/2;\n        captureOutput.rectOfInterest = CGRectMake((cropRect.origin.y + fixPadding)/fixHeight,\n                                                  cropRect.origin.x/bounds.size.width,\n                                                  cropRect.size.height/fixHeight,\n                                                  cropRect.size.width/bounds.size.width);\n    } else {\n        CGFloat fixWidth = bounds.size.height * h / w;\n        CGFloat fixPadding = (fixWidth - bounds.size.width)/2;\n        captureOutput.rectOfInterest = CGRectMake(cropRect.origin.y/bounds.size.height,\n                                                  (cropRect.origin.x + fixPadding)/fixWidth,\n                                                  cropRect.size.height/bounds.size.height,\n                                                  cropRect.size.width/fixWidth);\n    }\n}\n```\n\n##### 识别二维码图片\n识别二维码图片的功能，最初的方案是使用三方库`ZXing`来实现，因为`ZXing`有人在维护，但`ZXing`识别相册中的二维码图片或本地的图片时，有些图片根本就识别不出来，且耗时较长，所以改为使用`ZBar`。在网上找到一篇文章[再见ZXing 使用系统原生代码处理QRCode](http://adad184.com/2015/09/30/goodbye-zxing/),实测发现使用系统原生代码来识别二维码图片时，在，iphone4s，系统为iOS9的手机发现传回来的数组为空。代码如下：\n```objc \n- (NSString *)decodeQRImageWith:(UIImage*)aImage {\n    NSString *qrResult = nil; \n    //iOS8及以上可以使用系统自带的识别二维码图片接口，但此api有问题，在一些机型上detector为nil。 \n    if (iOS8_OR_LATER) { \n          CIContext *context = [CIContext contextWithOptions:nil];\n          CIDetector *detector = [CIDetector detectorOfType:CIDetectorTypeQRCode context:context options:@{CIDetectorAccuracy:CIDetectorAccuracyHigh}];\n          CIImage *image = [CIImage imageWithCGImage:aImage.CGImage];\n          NSArray *features = [detector featuresInImage:image];\n          CIQRCodeFeature *feature = [features firstObject]; \n          qrResult = feature.messageString;\n      } else {\n          ZBarReaderController* read = [ZBarReaderController new];\n          CGImageRef cgImageRef = aImage.CGImage;\n          ZBarSymbol* symbol = nil;\n          for(symbol in [read scanImage:cgImageRef]) break;\n             qrResult = symbol.data ;\n            return qrResult;\n     }\n }\n ```\n\n无图无真相：\n\n![14567CBE-E1D2-4FA7-AFA3-8B2037171F38.jpg](http://upload-images.jianshu.io/upload_images/117999-5dae9fc15755140c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\ndetector的值为nil，也就是说 \n\n```objc     \nCIDetector *detector = [CIDetector detectorOfType:CIDetectorTypeQRCode context:context options:@{CIDetectorAccuracy:CIDetectorAccuracyHigh}];\n```\nCIDetector的初始化方法无效。推测是苹果API的问题。 \n##### 生成二维码图片\n在`iOS8`及以上版本使用苹果的`API`生成二维码图片，代码如下：\n```objc\n- (UIImage *)encodeQRImageWithContent:(NSString *)content size:(CGSize)size {\n    UIImage *codeImage = nil;\n    if (iOS8_OR_LATER) {\n        NSData *stringData = [content dataUsingEncoding: NSUTF8StringEncoding]; \n        //生成\n      CIFilter *qrFilter = [CIFilter filterWithName:@\"CIQRCodeGenerator\"];\n      [qrFilter setValue:stringData forKey:@\"inputMessage\"];\n      [qrFilter setValue:@\"M\" forKey:@\"inputCorrectionLevel\"];\n      UIColor *onColor = [UIColor blackColor];\n      UIColor *offColor = [UIColor whiteColor];\n      //上色\n      CIFilter *colorFilter = [CIFilter filterWithName:@\"CIFalseColor\"\n                                         keysAndValues:\n                               @\"inputImage\",qrFilter.outputImage,\n                               @\"inputColor0\",[CIColor colorWithCGColor:onColor.CGColor],\n                               @\"inputColor1\",[CIColor colorWithCGColor:offColor.CGColor],\n                               nil];\n\n      CIImage *qrImage = colorFilter.outputImage;\n      CGImageRef cgImage = [[CIContext contextWithOptions:nil] createCGImage:qrImage fromRect:qrImage.extent];\n      UIGraphicsBeginImageContext(size);\n      CGContextRef context = UIGraphicsGetCurrentContext();\n      CGContextSetInterpolationQuality(context, kCGInterpolationNone);\n      CGContextScaleCTM(context, 1.0, -1.0);\n      CGContextDrawImage(context, CGContextGetClipBoundingBox(context), cgImage);\n      codeImage = UIGraphicsGetImageFromCurrentImageContext();\n      UIGraphicsEndImageContext(); \n      CGImageRelease(cgImage);\n      } else {\n          codeImage = [QRCodeGenerator qrImageForString:content imageSize:size.width];\n      }\n      return codeImage;\n  }\n```\n`iOS8`以下使用`libqrencode`库来生成二维码图片。\n\n#### 代码完善\n`2015年12月11日` \n\n`QA`测试发现，服务端生成的二维码，使用`ZBar`识别不出来，但将这张图片保存到相册，然后发送就可以识别出来。最初的想法是要服务端修改生成的二维码，但安卓能够识别出来，此路不通，那只有看ZBar的源码了。\n```objc\n- (id <NSFastEnumeration>) scanImage: (CGImageRef) image {\n        timer_start;\n        int nsyms = [self scanImage: image\n                          withScaling: 0];\n      //没有识别出来，判断CGImageRef对象的宽和高是否大于640，大于或等于的话进行缩放再进行扫描\n        if(!nsyms &&\n           CGImageGetWidth(image) >= 640 &&\n           CGImageGetHeight(image) >= 640)\n            // make one more attempt for close up, grainy images\n            nsyms = [self scanImage: image\n                          withScaling: .5];\n\n        NSMutableArray *syms = nil;\n        if(nsyms) {\n            // quality/type filtering\n            int max_quality = MIN_QUALITY;\n            for(ZBarSymbol *sym in scanner.results) {\n                zbar_symbol_type_t type = sym.type;\n                int quality;\n                if(type == ZBAR_QRCODE)\n                    quality = INT_MAX;\n                else\n                    quality = sym.quality;\n\n                if(quality < max_quality) {\n                    zlog(@\"    type=%d quality=%d < %d\\n\",\n                         type, quality, max_quality);\n                    continue;\n                }\n\n                if(max_quality < quality) {\n                    max_quality = quality;\n                    if(syms)\n                        [syms removeAllObjects];\n                }\n                zlog(@\"    type=%d quality=%d\\n\", type, quality);\n                if(!syms)\n                    syms = [NSMutableArray arrayWithCapacity: 1];\n\n                [syms addObject: sym];\n            }\n        }\n\n        zlog(@\"read %d filtered symbols in %gs total\\n\",\n              (!syms) ? 0 : [syms count], timer_elapsed(t_start, timer_now()));\n        return(syms);\n      }\n      if(max_quality < quality) {\n          max_quality = quality;\n          if(syms)\n              [syms removeAllObjects];\n      }\n      zlog(@\"    type=%d quality=%d\\n\", type, quality);\n      if(!syms)\n          syms = [NSMutableArray arrayWithCapacity: 1];\n\n      [syms addObject: sym];\n      }\n  }\n  zlog(@\"read %d filtered symbols in %gs total\\n\",\n        (!syms) ? 0 : [syms count], timer_elapsed(t_start, timer_now()));\n  return(syms);\n}\n```\n\n在这里就产生了一个解决有些二维码图片识别不出来的解决思路：将传过来的`UIImage`的宽和高设置为640，识别不出来再进行缩放识别。修改`UIImage`的代码如下：\n```objc\n-(UIImage *)TransformtoSize:(CGSize)Newsize {\n    // 创建一个bitmap的context\n    UIGraphicsBeginImageContext(Newsize);\n    // 绘制改变大小的图片\n    [self drawInRect:CGRectMake(0, 0, Newsize.width, Newsize.height)];\n    // 从当前context中创建一个改变大小后的图片\n    UIImage *TransformedImg=UIGraphicsGetImageFromCurrentImageContext();\n    // 使当前的context出堆栈\n    UIGraphicsEndImageContext();\n    // 返回新的改变大小后的图片\n    return TransformedImg;\n}\n```\n这样类似于将`ZXing`中的`tryHard`设置为`YES`。识别不出来的二维码图片就可以识别了。\n\n`2016年5月20日`\n`遗留的bug`: 点击进入扫一扫界面，退出，再进入，这样重复5次左右，扫一扫之前的界面的会出现卡顿。\n原因：多次进入扫一扫界面，再退出，因此界面未被系统回收，captureSession对象一直在运行，会造成内存泄露，引起上一个界面卡顿。\n解决方案：在视图将要消失的时候，确保captureSession对象停止运行。\n```objc\n- (void)viewWillDisappear:(BOOL)animated {\n  [super viewWillDisappear:animated];\n  if ([self.captureSession isRunning]) {\n      [self.captureSession stopRunning];\n  }\n}\n```\n#### 小结\n源码和demo请点[这里](https://github.com/hua16/QRCodeDemo.git)\n参考的文章链接如下\n[再见ZXing 使用系统原生代码处理QRCode](http://adad184.com/2015/09/30/goodbye-zxing/)\n[IOS二维码扫描,你需要注意的两件事](http://blog.cnbluebox.com/blog/2014/08/26/ioser-wei-ma-sao-miao/)\n[[Zbar算法流程介绍](http://blog.csdn.net/u013738531/article/details/54574262)](http://blog.csdn.net/u013738531/article/details/54574262)","slug":"qr-droid","published":1,"updated":"2017-11-06T09:06:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r4ahld00002npwdqfgpgm4","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>之前做过一个关于二维码的组件，已发布，现总结下。<br>开发的<code>APP</code>所需支持的最低版本为<code>8.0</code>，最初的方案为扫描使用苹果自带的<code>API</code>实现扫一扫的功能、使用<code>ZXing</code>识别从相册或别人转发的二维码图片。但发现<code>ZXing</code>识别从相册中来的图片性能很差，很多图片识别不了，且耗时较长，遂使用<code>ZBar</code>来实现识别从相册或别人转发的二维码图片。<br>这个组件重要实现了三个功能，扫一扫识别二维码图片、长按图片识别二维码图片和生成二维码图片。<br>首先来看下扫一扫识别二维码图片的代码实现：</p><h4 id=\"功能实现\"><a href=\"#功能实现\" class=\"headerlink\" title=\"功能实现\"></a>功能实现</h4><h5 id=\"扫一扫识别二维码图片\"><a href=\"#扫一扫识别二维码图片\" class=\"headerlink\" title=\"扫一扫识别二维码图片\"></a>扫一扫识别二维码图片</h5><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)initCapture &#123;</div><div class=\"line\">    <span class=\"built_in\">AVCaptureDevice</span>* inputDevice =</div><div class=\"line\">    [<span class=\"built_in\">AVCaptureDevice</span> defaultDeviceWithMediaType:<span class=\"built_in\">AVMediaTypeVideo</span>]; </div><div class=\"line\">    [inputDevice lockForConfiguration:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> ([inputDevice hasTorch])&#123;</div><div class=\"line\">        inputDevice.torchMode = <span class=\"built_in\">AVCaptureTorchModeAuto</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">AVCaptureFocusMode</span> foucusMode = <span class=\"built_in\">AVCaptureFocusModeContinuousAutoFocus</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([inputDevice isFocusModeSupported:foucusMode]) &#123;</div><div class=\"line\">        inputDevice.focusMode = foucusMode;</div><div class=\"line\">    &#125;</div><div class=\"line\">    [inputDevice unlockForConfiguration];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">AVCaptureDeviceInput</span> *captureInput =</div><div class=\"line\">    [<span class=\"built_in\">AVCaptureDeviceInput</span> deviceInputWithDevice:inputDevice error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (!captureInput) &#123;</div><div class=\"line\">        <span class=\"comment\">//支持的最低版本为iOS8</span></div><div class=\"line\">        <span class=\"built_in\">UIAlertController</span> *alterVC = [<span class=\"built_in\">UIAlertController</span> alertControllerWithTitle:MUIQRCodeLocalizedString(<span class=\"string\">@\"ScanViewController_system_tip\"</span>) message:MUIQRCodeLocalizedString(<span class=\"string\">@\"ScanViewController_camera_permission\"</span>) preferredStyle:<span class=\"built_in\">UIAlertControllerStyleAlert</span>];</div><div class=\"line\">        <span class=\"built_in\">UIAlertAction</span> *confirmAction = [<span class=\"built_in\">UIAlertAction</span> actionWithTitle:MUIQRCodeLocalizedString(<span class=\"string\">@\"ScanViewController_yes\"</span>) style:<span class=\"built_in\">UIAlertActionStyleDefault</span> handler:<span class=\"literal\">nil</span>];</div><div class=\"line\">        [alterVC addAction:confirmAction];</div><div class=\"line\">        [<span class=\"keyword\">self</span> presentViewController:alterVC animated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.activityView stopAnimating];</div><div class=\"line\">        [<span class=\"keyword\">self</span> onVideoStart:<span class=\"literal\">nil</span>];</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">AVCaptureMetadataOutput</span> *captureOutput = [[<span class=\"built_in\">AVCaptureMetadataOutput</span> alloc] init];</div><div class=\"line\">    [captureOutput setMetadataObjectsDelegate:<span class=\"keyword\">self</span> queue:_queue];</div><div class=\"line\">    <span class=\"keyword\">self</span>.captureOutput = captureOutput;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span>.captureSession = [[<span class=\"built_in\">AVCaptureSession</span> alloc] init];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.captureSession addInput:captureInput];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.captureSession addOutput:captureOutput];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> w = <span class=\"number\">1920.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> h = <span class=\"number\">1080.</span>f;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.captureSession canSetSessionPreset:<span class=\"built_in\">AVCaptureSessionPreset1920x1080</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.captureSession.sessionPreset = <span class=\"built_in\">AVCaptureSessionPreset1920x1080</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.captureSession canSetSessionPreset:<span class=\"built_in\">AVCaptureSessionPreset1280x720</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.captureSession.sessionPreset = <span class=\"built_in\">AVCaptureSessionPreset1280x720</span>;</div><div class=\"line\">        w = <span class=\"number\">1280.</span>f;</div><div class=\"line\">        h = <span class=\"number\">720.</span>f;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.captureSession canSetSessionPreset:<span class=\"built_in\">AVCaptureSessionPreset640x480</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.captureSession.sessionPreset = <span class=\"built_in\">AVCaptureSessionPreset640x480</span>;</div><div class=\"line\">        w = <span class=\"number\">960.</span>f;</div><div class=\"line\">        h = <span class=\"number\">540.</span>f;</div><div class=\"line\">    &#125;</div><div class=\"line\">    captureOutput.metadataObjectTypes = [captureOutput availableMetadataObjectTypes];</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> bounds = [[<span class=\"built_in\">UIScreen</span> mainScreen] bounds];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.prevLayer) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.prevLayer = [<span class=\"built_in\">AVCaptureVideoPreviewLayer</span> layerWithSession:<span class=\"keyword\">self</span>.captureSession];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">self</span>.prevLayer.frame = bounds;</div><div class=\"line\">    <span class=\"keyword\">self</span>.prevLayer.videoGravity = <span class=\"built_in\">AVLayerVideoGravityResizeAspectFill</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view.layer insertSublayer:<span class=\"keyword\">self</span>.prevLayer atIndex:<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"comment\">//下面代码主要用来设置扫描的聚焦范围，计算rectOfInterest</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> p1 = bounds.size.height/bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> p2 = w/h;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGRect</span> cropRect = <span class=\"built_in\">CGRectMake</span>(<span class=\"built_in\">CGRectGetMinX</span>(_cropRect) - kSNReaderScanExpandWidth, <span class=\"built_in\">CGRectGetMinY</span>(_cropRect) - kSNReaderScanExpandHeight, <span class=\"built_in\">CGRectGetWidth</span>(_cropRect) + <span class=\"number\">2</span>*kSNReaderScanExpandWidth, <span class=\"built_in\">CGRectGetHeight</span>(_cropRect) + <span class=\"number\">2</span>*kSNReaderScanExpandHeight);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//    CGRect cropRect = _cropRect;</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (fabs(p1 - p2) &lt; <span class=\"number\">0.00001</span>) &#123;</div><div class=\"line\">        captureOutput.rectOfInterest = <span class=\"built_in\">CGRectMake</span>(cropRect.origin.y /bounds.size.height,                         cropRect.origin.x/bounds.size.width,</div><div class=\"line\">                                                  cropRect.size.height/bounds.size.height,</div><div class=\"line\">                                                  cropRect.size.width/bounds.size.width);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p1 &lt; p2) &#123;</div><div class=\"line\">        <span class=\"comment\">//实际图像被截取一段高</span></div><div class=\"line\">        <span class=\"built_in\">CGFloat</span> fixHeight = bounds.size.width * w / h;</div><div class=\"line\">        <span class=\"built_in\">CGFloat</span> fixPadding = (fixHeight - bounds.size.height)/<span class=\"number\">2</span>;</div><div class=\"line\">        captureOutput.rectOfInterest = <span class=\"built_in\">CGRectMake</span>((cropRect.origin.y + fixPadding)/fixHeight,</div><div class=\"line\">                                                  cropRect.origin.x/bounds.size.width,</div><div class=\"line\">                                                  cropRect.size.height/fixHeight,</div><div class=\"line\">                                                  cropRect.size.width/bounds.size.width);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">CGFloat</span> fixWidth = bounds.size.height * h / w;</div><div class=\"line\">        <span class=\"built_in\">CGFloat</span> fixPadding = (fixWidth - bounds.size.width)/<span class=\"number\">2</span>;</div><div class=\"line\">        captureOutput.rectOfInterest = <span class=\"built_in\">CGRectMake</span>(cropRect.origin.y/bounds.size.height,</div><div class=\"line\">                                                  (cropRect.origin.x + fixPadding)/fixWidth,</div><div class=\"line\">                                                  cropRect.size.height/bounds.size.height,</div><div class=\"line\">                                                  cropRect.size.width/fixWidth);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h5 id=\"识别二维码图片\"><a href=\"#识别二维码图片\" class=\"headerlink\" title=\"识别二维码图片\"></a>识别二维码图片</h5><p>识别二维码图片的功能，最初的方案是使用三方库<code>ZXing</code>来实现，因为<code>ZXing</code>有人在维护，但<code>ZXing</code>识别相册中的二维码图片或本地的图片时，有些图片根本就识别不出来，且耗时较长，所以改为使用<code>ZBar</code>。在网上找到一篇文章<a href=\"http://adad184.com/2015/09/30/goodbye-zxing/\" target=\"_blank\" rel=\"external\">再见ZXing 使用系统原生代码处理QRCode</a>,实测发现使用系统原生代码来识别二维码图片时，在，iphone4s，系统为iOS9的手机发现传回来的数组为空。代码如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)decodeQRImageWith:(<span class=\"built_in\">UIImage</span>*)aImage &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *qrResult = <span class=\"literal\">nil</span>; </div><div class=\"line\">    <span class=\"comment\">//iOS8及以上可以使用系统自带的识别二维码图片接口，但此api有问题，在一些机型上detector为nil。 </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (iOS8_OR_LATER) &#123; </div><div class=\"line\">          <span class=\"built_in\">CIContext</span> *context = [<span class=\"built_in\">CIContext</span> contextWithOptions:<span class=\"literal\">nil</span>];</div><div class=\"line\">          <span class=\"built_in\">CIDetector</span> *detector = [<span class=\"built_in\">CIDetector</span> detectorOfType:<span class=\"built_in\">CIDetectorTypeQRCode</span> context:context options:@&#123;<span class=\"built_in\">CIDetectorAccuracy</span>:<span class=\"built_in\">CIDetectorAccuracyHigh</span>&#125;];</div><div class=\"line\">          <span class=\"built_in\">CIImage</span> *image = [<span class=\"built_in\">CIImage</span> imageWithCGImage:aImage.CGImage];</div><div class=\"line\">          <span class=\"built_in\">NSArray</span> *features = [detector featuresInImage:image];</div><div class=\"line\">          <span class=\"built_in\">CIQRCodeFeature</span> *feature = [features firstObject]; </div><div class=\"line\">          qrResult = feature.messageString;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          ZBarReaderController* read = [ZBarReaderController new];</div><div class=\"line\">          <span class=\"built_in\">CGImageRef</span> cgImageRef = aImage.CGImage;</div><div class=\"line\">          ZBarSymbol* symbol = <span class=\"literal\">nil</span>;</div><div class=\"line\">          <span class=\"keyword\">for</span>(symbol <span class=\"keyword\">in</span> [read scanImage:cgImageRef]) <span class=\"keyword\">break</span>;</div><div class=\"line\">             qrResult = symbol.data ;</div><div class=\"line\">            <span class=\"keyword\">return</span> qrResult;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure><p></p><p>无图无真相：</p><p><img src=\"http://upload-images.jianshu.io/upload_images/117999-5dae9fc15755140c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"14567CBE-E1D2-4FA7-AFA3-8B2037171F38.jpg\"></p><p>detector的值为nil，也就是说</p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">CIDetector</span> *detector = [<span class=\"built_in\">CIDetector</span> detectorOfType:<span class=\"built_in\">CIDetectorTypeQRCode</span> context:context options:@&#123;<span class=\"built_in\">CIDetectorAccuracy</span>:<span class=\"built_in\">CIDetectorAccuracyHigh</span>&#125;];</div></pre></td></tr></table></figure><p>CIDetector的初始化方法无效。推测是苹果API的问题。</p><h5 id=\"生成二维码图片\"><a href=\"#生成二维码图片\" class=\"headerlink\" title=\"生成二维码图片\"></a>生成二维码图片</h5><p>在<code>iOS8</code>及以上版本使用苹果的<code>API</code>生成二维码图片，代码如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">UIImage</span> *)encodeQRImageWithContent:(<span class=\"built_in\">NSString</span> *)content size:(<span class=\"built_in\">CGSize</span>)size &#123;</div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *codeImage = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (iOS8_OR_LATER) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSData</span> *stringData = [content dataUsingEncoding: <span class=\"built_in\">NSUTF8StringEncoding</span>]; </div><div class=\"line\">        <span class=\"comment\">//生成</span></div><div class=\"line\">      <span class=\"built_in\">CIFilter</span> *qrFilter = [<span class=\"built_in\">CIFilter</span> filterWithName:<span class=\"string\">@\"CIQRCodeGenerator\"</span>];</div><div class=\"line\">      [qrFilter setValue:stringData forKey:<span class=\"string\">@\"inputMessage\"</span>];</div><div class=\"line\">      [qrFilter setValue:<span class=\"string\">@\"M\"</span> forKey:<span class=\"string\">@\"inputCorrectionLevel\"</span>];</div><div class=\"line\">      <span class=\"built_in\">UIColor</span> *onColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">      <span class=\"built_in\">UIColor</span> *offColor = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\">      <span class=\"comment\">//上色</span></div><div class=\"line\">      <span class=\"built_in\">CIFilter</span> *colorFilter = [<span class=\"built_in\">CIFilter</span> filterWithName:<span class=\"string\">@\"CIFalseColor\"</span></div><div class=\"line\">                                         keysAndValues:</div><div class=\"line\">                               <span class=\"string\">@\"inputImage\"</span>,qrFilter.outputImage,</div><div class=\"line\">                               <span class=\"string\">@\"inputColor0\"</span>,[<span class=\"built_in\">CIColor</span> colorWithCGColor:onColor.CGColor],</div><div class=\"line\">                               <span class=\"string\">@\"inputColor1\"</span>,[<span class=\"built_in\">CIColor</span> colorWithCGColor:offColor.CGColor],</div><div class=\"line\">                               <span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">CIImage</span> *qrImage = colorFilter.outputImage;</div><div class=\"line\">      <span class=\"built_in\">CGImageRef</span> cgImage = [[<span class=\"built_in\">CIContext</span> contextWithOptions:<span class=\"literal\">nil</span>] createCGImage:qrImage fromRect:qrImage.extent];</div><div class=\"line\">      <span class=\"built_in\">UIGraphicsBeginImageContext</span>(size);</div><div class=\"line\">      <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</div><div class=\"line\">      <span class=\"built_in\">CGContextSetInterpolationQuality</span>(context, kCGInterpolationNone);</div><div class=\"line\">      <span class=\"built_in\">CGContextScaleCTM</span>(context, <span class=\"number\">1.0</span>, <span class=\"number\">-1.0</span>);</div><div class=\"line\">      <span class=\"built_in\">CGContextDrawImage</span>(context, <span class=\"built_in\">CGContextGetClipBoundingBox</span>(context), cgImage);</div><div class=\"line\">      codeImage = <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class=\"line\">      <span class=\"built_in\">UIGraphicsEndImageContext</span>(); </div><div class=\"line\">      <span class=\"built_in\">CGImageRelease</span>(cgImage);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          codeImage = [QRCodeGenerator qrImageForString:content imageSize:size.width];</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> codeImage;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure><p></p><p><code>iOS8</code>以下使用<code>libqrencode</code>库来生成二维码图片。</p><h4 id=\"代码完善\"><a href=\"#代码完善\" class=\"headerlink\" title=\"代码完善\"></a>代码完善</h4><p><code>2015年12月11日</code></p><p><code>QA</code>测试发现，服务端生成的二维码，使用<code>ZBar</code>识别不出来，但将这张图片保存到相册，然后发送就可以识别出来。最初的想法是要服务端修改生成的二维码，但安卓能够识别出来，此路不通，那只有看ZBar的源码了。<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span> &lt;<span class=\"built_in\">NSFastEnumeration</span>&gt;) scanImage: (<span class=\"built_in\">CGImageRef</span>) image &#123;</div><div class=\"line\">        timer_start;</div><div class=\"line\">        <span class=\"keyword\">int</span> nsyms = [<span class=\"keyword\">self</span> scanImage: image</div><div class=\"line\">                          withScaling: <span class=\"number\">0</span>];</div><div class=\"line\">      <span class=\"comment\">//没有识别出来，判断CGImageRef对象的宽和高是否大于640，大于或等于的话进行缩放再进行扫描</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(!nsyms &amp;&amp;</div><div class=\"line\">           <span class=\"built_in\">CGImageGetWidth</span>(image) &gt;= <span class=\"number\">640</span> &amp;&amp;</div><div class=\"line\">           <span class=\"built_in\">CGImageGetHeight</span>(image) &gt;= <span class=\"number\">640</span>)</div><div class=\"line\">            <span class=\"comment\">// make one more attempt for close up, grainy images</span></div><div class=\"line\">            nsyms = [<span class=\"keyword\">self</span> scanImage: image</div><div class=\"line\">                          withScaling: <span class=\"number\">.5</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSMutableArray</span> *syms = <span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(nsyms) &#123;</div><div class=\"line\">            <span class=\"comment\">// quality/type filtering</span></div><div class=\"line\">            <span class=\"keyword\">int</span> max_quality = MIN_QUALITY;</div><div class=\"line\">            <span class=\"keyword\">for</span>(ZBarSymbol *sym <span class=\"keyword\">in</span> scanner.results) &#123;</div><div class=\"line\">                zbar_symbol_type_t type = sym.type;</div><div class=\"line\">                <span class=\"keyword\">int</span> quality;</div><div class=\"line\">                <span class=\"keyword\">if</span>(type == ZBAR_QRCODE)</div><div class=\"line\">                    quality = INT_MAX;</div><div class=\"line\">                <span class=\"keyword\">else</span></div><div class=\"line\">                    quality = sym.quality;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(quality &lt; max_quality) &#123;</div><div class=\"line\">                    zlog(<span class=\"string\">@\"    type=%d quality=%d &lt; %d\\n\"</span>,</div><div class=\"line\">                         type, quality, max_quality);</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(max_quality &lt; quality) &#123;</div><div class=\"line\">                    max_quality = quality;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(syms)</div><div class=\"line\">                        [syms removeAllObjects];</div><div class=\"line\">                &#125;</div><div class=\"line\">                zlog(<span class=\"string\">@\"    type=%d quality=%d\\n\"</span>, type, quality);</div><div class=\"line\">                <span class=\"keyword\">if</span>(!syms)</div><div class=\"line\">                    syms = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity: <span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">                [syms addObject: sym];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        zlog(<span class=\"string\">@\"read %d filtered symbols in %gs total\\n\"</span>,</div><div class=\"line\">              (!syms) ? <span class=\"number\">0</span> : [syms count], timer_elapsed(t_start, timer_now()));</div><div class=\"line\">        <span class=\"keyword\">return</span>(syms);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span>(max_quality &lt; quality) &#123;</div><div class=\"line\">          max_quality = quality;</div><div class=\"line\">          <span class=\"keyword\">if</span>(syms)</div><div class=\"line\">              [syms removeAllObjects];</div><div class=\"line\">      &#125;</div><div class=\"line\">      zlog(<span class=\"string\">@\"    type=%d quality=%d\\n\"</span>, type, quality);</div><div class=\"line\">      <span class=\"keyword\">if</span>(!syms)</div><div class=\"line\">          syms = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity: <span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">      [syms addObject: sym];</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  zlog(<span class=\"string\">@\"read %d filtered symbols in %gs total\\n\"</span>,</div><div class=\"line\">        (!syms) ? <span class=\"number\">0</span> : [syms count], timer_elapsed(t_start, timer_now()));</div><div class=\"line\">  <span class=\"keyword\">return</span>(syms);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>在这里就产生了一个解决有些二维码图片识别不出来的解决思路：将传过来的<code>UIImage</code>的宽和高设置为640，识别不出来再进行缩放识别。修改<code>UIImage</code>的代码如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">UIImage</span> *)TransformtoSize:(<span class=\"built_in\">CGSize</span>)Newsize &#123;</div><div class=\"line\">    <span class=\"comment\">// 创建一个bitmap的context</span></div><div class=\"line\">    <span class=\"built_in\">UIGraphicsBeginImageContext</span>(Newsize);</div><div class=\"line\">    <span class=\"comment\">// 绘制改变大小的图片</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> drawInRect:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, Newsize.width, Newsize.height)];</div><div class=\"line\">    <span class=\"comment\">// 从当前context中创建一个改变大小后的图片</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *TransformedImg=<span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class=\"line\">    <span class=\"comment\">// 使当前的context出堆栈</span></div><div class=\"line\">    <span class=\"built_in\">UIGraphicsEndImageContext</span>();</div><div class=\"line\">    <span class=\"comment\">// 返回新的改变大小后的图片</span></div><div class=\"line\">    <span class=\"keyword\">return</span> TransformedImg;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>这样类似于将<code>ZXing</code>中的<code>tryHard</code>设置为<code>YES</code>。识别不出来的二维码图片就可以识别了。</p><p><code>2016年5月20日</code><br><code>遗留的bug</code>: 点击进入扫一扫界面，退出，再进入，这样重复5次左右，扫一扫之前的界面的会出现卡顿。<br>原因：多次进入扫一扫界面，再退出，因此界面未被系统回收，captureSession对象一直在运行，会造成内存泄露，引起上一个界面卡顿。<br>解决方案：在视图将要消失的时候，确保captureSession对象停止运行。<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewWillDisappear:(<span class=\"built_in\">BOOL</span>)animated &#123;</div><div class=\"line\">  [<span class=\"keyword\">super</span> viewWillDisappear:animated];</div><div class=\"line\">  <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.captureSession isRunning]) &#123;</div><div class=\"line\">      [<span class=\"keyword\">self</span>.captureSession stopRunning];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>源码和demo请点<a href=\"https://github.com/hua16/QRCodeDemo.git\" target=\"_blank\" rel=\"external\">这里</a><br>参考的文章链接如下<br><a href=\"http://adad184.com/2015/09/30/goodbye-zxing/\" target=\"_blank\" rel=\"external\">再见ZXing 使用系统原生代码处理QRCode</a><br><a href=\"http://blog.cnbluebox.com/blog/2014/08/26/ioser-wei-ma-sao-miao/\" target=\"_blank\" rel=\"external\">IOS二维码扫描,你需要注意的两件事</a><br><a href=\"http://blog.csdn.net/u013738531/article/details/54574262\" target=\"_blank\" rel=\"external\"><a href=\"http://blog.csdn.net/u013738531/article/details/54574262\" target=\"_blank\" rel=\"external\">Zbar算法流程介绍</a></a></p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>之前做过一个关于二维码的组件，已发布，现总结下。<br>开发的<code>APP</code>所需支持的最低版本为<code>8.0</code>，最初的方案为扫描使用苹果自带的<code>API</code>实现扫一扫的功能、使用<code>ZXing</code>识别从相册或别人转发的二维码图片。但发现<code>ZXing</code>识别从相册中来的图片性能很差，很多图片识别不了，且耗时较长，遂使用<code>ZBar</code>来实现识别从相册或别人转发的二维码图片。<br>这个组件重要实现了三个功能，扫一扫识别二维码图片、长按图片识别二维码图片和生成二维码图片。<br>首先来看下扫一扫识别二维码图片的代码实现：</p><h4 id=\"功能实现\"><a href=\"#功能实现\" class=\"headerlink\" title=\"功能实现\"></a>功能实现</h4><h5 id=\"扫一扫识别二维码图片\"><a href=\"#扫一扫识别二维码图片\" class=\"headerlink\" title=\"扫一扫识别二维码图片\"></a>扫一扫识别二维码图片</h5><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)initCapture &#123;</div><div class=\"line\">    <span class=\"built_in\">AVCaptureDevice</span>* inputDevice =</div><div class=\"line\">    [<span class=\"built_in\">AVCaptureDevice</span> defaultDeviceWithMediaType:<span class=\"built_in\">AVMediaTypeVideo</span>]; </div><div class=\"line\">    [inputDevice lockForConfiguration:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> ([inputDevice hasTorch])&#123;</div><div class=\"line\">        inputDevice.torchMode = <span class=\"built_in\">AVCaptureTorchModeAuto</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">AVCaptureFocusMode</span> foucusMode = <span class=\"built_in\">AVCaptureFocusModeContinuousAutoFocus</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([inputDevice isFocusModeSupported:foucusMode]) &#123;</div><div class=\"line\">        inputDevice.focusMode = foucusMode;</div><div class=\"line\">    &#125;</div><div class=\"line\">    [inputDevice unlockForConfiguration];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">AVCaptureDeviceInput</span> *captureInput =</div><div class=\"line\">    [<span class=\"built_in\">AVCaptureDeviceInput</span> deviceInputWithDevice:inputDevice error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (!captureInput) &#123;</div><div class=\"line\">        <span class=\"comment\">//支持的最低版本为iOS8</span></div><div class=\"line\">        <span class=\"built_in\">UIAlertController</span> *alterVC = [<span class=\"built_in\">UIAlertController</span> alertControllerWithTitle:MUIQRCodeLocalizedString(<span class=\"string\">@\"ScanViewController_system_tip\"</span>) message:MUIQRCodeLocalizedString(<span class=\"string\">@\"ScanViewController_camera_permission\"</span>) preferredStyle:<span class=\"built_in\">UIAlertControllerStyleAlert</span>];</div><div class=\"line\">        <span class=\"built_in\">UIAlertAction</span> *confirmAction = [<span class=\"built_in\">UIAlertAction</span> actionWithTitle:MUIQRCodeLocalizedString(<span class=\"string\">@\"ScanViewController_yes\"</span>) style:<span class=\"built_in\">UIAlertActionStyleDefault</span> handler:<span class=\"literal\">nil</span>];</div><div class=\"line\">        [alterVC addAction:confirmAction];</div><div class=\"line\">        [<span class=\"keyword\">self</span> presentViewController:alterVC animated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.activityView stopAnimating];</div><div class=\"line\">        [<span class=\"keyword\">self</span> onVideoStart:<span class=\"literal\">nil</span>];</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">AVCaptureMetadataOutput</span> *captureOutput = [[<span class=\"built_in\">AVCaptureMetadataOutput</span> alloc] init];</div><div class=\"line\">    [captureOutput setMetadataObjectsDelegate:<span class=\"keyword\">self</span> queue:_queue];</div><div class=\"line\">    <span class=\"keyword\">self</span>.captureOutput = captureOutput;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span>.captureSession = [[<span class=\"built_in\">AVCaptureSession</span> alloc] init];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.captureSession addInput:captureInput];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.captureSession addOutput:captureOutput];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> w = <span class=\"number\">1920.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> h = <span class=\"number\">1080.</span>f;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.captureSession canSetSessionPreset:<span class=\"built_in\">AVCaptureSessionPreset1920x1080</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.captureSession.sessionPreset = <span class=\"built_in\">AVCaptureSessionPreset1920x1080</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.captureSession canSetSessionPreset:<span class=\"built_in\">AVCaptureSessionPreset1280x720</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.captureSession.sessionPreset = <span class=\"built_in\">AVCaptureSessionPreset1280x720</span>;</div><div class=\"line\">        w = <span class=\"number\">1280.</span>f;</div><div class=\"line\">        h = <span class=\"number\">720.</span>f;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.captureSession canSetSessionPreset:<span class=\"built_in\">AVCaptureSessionPreset640x480</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.captureSession.sessionPreset = <span class=\"built_in\">AVCaptureSessionPreset640x480</span>;</div><div class=\"line\">        w = <span class=\"number\">960.</span>f;</div><div class=\"line\">        h = <span class=\"number\">540.</span>f;</div><div class=\"line\">    &#125;</div><div class=\"line\">    captureOutput.metadataObjectTypes = [captureOutput availableMetadataObjectTypes];</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> bounds = [[<span class=\"built_in\">UIScreen</span> mainScreen] bounds];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.prevLayer) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.prevLayer = [<span class=\"built_in\">AVCaptureVideoPreviewLayer</span> layerWithSession:<span class=\"keyword\">self</span>.captureSession];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">self</span>.prevLayer.frame = bounds;</div><div class=\"line\">    <span class=\"keyword\">self</span>.prevLayer.videoGravity = <span class=\"built_in\">AVLayerVideoGravityResizeAspectFill</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view.layer insertSublayer:<span class=\"keyword\">self</span>.prevLayer atIndex:<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"comment\">//下面代码主要用来设置扫描的聚焦范围，计算rectOfInterest</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> p1 = bounds.size.height/bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> p2 = w/h;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGRect</span> cropRect = <span class=\"built_in\">CGRectMake</span>(<span class=\"built_in\">CGRectGetMinX</span>(_cropRect) - kSNReaderScanExpandWidth, <span class=\"built_in\">CGRectGetMinY</span>(_cropRect) - kSNReaderScanExpandHeight, <span class=\"built_in\">CGRectGetWidth</span>(_cropRect) + <span class=\"number\">2</span>*kSNReaderScanExpandWidth, <span class=\"built_in\">CGRectGetHeight</span>(_cropRect) + <span class=\"number\">2</span>*kSNReaderScanExpandHeight);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//    CGRect cropRect = _cropRect;</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (fabs(p1 - p2) &lt; <span class=\"number\">0.00001</span>) &#123;</div><div class=\"line\">        captureOutput.rectOfInterest = <span class=\"built_in\">CGRectMake</span>(cropRect.origin.y /bounds.size.height,                         cropRect.origin.x/bounds.size.width,</div><div class=\"line\">                                                  cropRect.size.height/bounds.size.height,</div><div class=\"line\">                                                  cropRect.size.width/bounds.size.width);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p1 &lt; p2) &#123;</div><div class=\"line\">        <span class=\"comment\">//实际图像被截取一段高</span></div><div class=\"line\">        <span class=\"built_in\">CGFloat</span> fixHeight = bounds.size.width * w / h;</div><div class=\"line\">        <span class=\"built_in\">CGFloat</span> fixPadding = (fixHeight - bounds.size.height)/<span class=\"number\">2</span>;</div><div class=\"line\">        captureOutput.rectOfInterest = <span class=\"built_in\">CGRectMake</span>((cropRect.origin.y + fixPadding)/fixHeight,</div><div class=\"line\">                                                  cropRect.origin.x/bounds.size.width,</div><div class=\"line\">                                                  cropRect.size.height/fixHeight,</div><div class=\"line\">                                                  cropRect.size.width/bounds.size.width);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">CGFloat</span> fixWidth = bounds.size.height * h / w;</div><div class=\"line\">        <span class=\"built_in\">CGFloat</span> fixPadding = (fixWidth - bounds.size.width)/<span class=\"number\">2</span>;</div><div class=\"line\">        captureOutput.rectOfInterest = <span class=\"built_in\">CGRectMake</span>(cropRect.origin.y/bounds.size.height,</div><div class=\"line\">                                                  (cropRect.origin.x + fixPadding)/fixWidth,</div><div class=\"line\">                                                  cropRect.size.height/bounds.size.height,</div><div class=\"line\">                                                  cropRect.size.width/fixWidth);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h5 id=\"识别二维码图片\"><a href=\"#识别二维码图片\" class=\"headerlink\" title=\"识别二维码图片\"></a>识别二维码图片</h5><p>识别二维码图片的功能，最初的方案是使用三方库<code>ZXing</code>来实现，因为<code>ZXing</code>有人在维护，但<code>ZXing</code>识别相册中的二维码图片或本地的图片时，有些图片根本就识别不出来，且耗时较长，所以改为使用<code>ZBar</code>。在网上找到一篇文章<a href=\"http://adad184.com/2015/09/30/goodbye-zxing/\" target=\"_blank\" rel=\"external\">再见ZXing 使用系统原生代码处理QRCode</a>,实测发现使用系统原生代码来识别二维码图片时，在，iphone4s，系统为iOS9的手机发现传回来的数组为空。代码如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)decodeQRImageWith:(<span class=\"built_in\">UIImage</span>*)aImage &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *qrResult = <span class=\"literal\">nil</span>; </div><div class=\"line\">    <span class=\"comment\">//iOS8及以上可以使用系统自带的识别二维码图片接口，但此api有问题，在一些机型上detector为nil。 </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (iOS8_OR_LATER) &#123; </div><div class=\"line\">          <span class=\"built_in\">CIContext</span> *context = [<span class=\"built_in\">CIContext</span> contextWithOptions:<span class=\"literal\">nil</span>];</div><div class=\"line\">          <span class=\"built_in\">CIDetector</span> *detector = [<span class=\"built_in\">CIDetector</span> detectorOfType:<span class=\"built_in\">CIDetectorTypeQRCode</span> context:context options:@&#123;<span class=\"built_in\">CIDetectorAccuracy</span>:<span class=\"built_in\">CIDetectorAccuracyHigh</span>&#125;];</div><div class=\"line\">          <span class=\"built_in\">CIImage</span> *image = [<span class=\"built_in\">CIImage</span> imageWithCGImage:aImage.CGImage];</div><div class=\"line\">          <span class=\"built_in\">NSArray</span> *features = [detector featuresInImage:image];</div><div class=\"line\">          <span class=\"built_in\">CIQRCodeFeature</span> *feature = [features firstObject]; </div><div class=\"line\">          qrResult = feature.messageString;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          ZBarReaderController* read = [ZBarReaderController new];</div><div class=\"line\">          <span class=\"built_in\">CGImageRef</span> cgImageRef = aImage.CGImage;</div><div class=\"line\">          ZBarSymbol* symbol = <span class=\"literal\">nil</span>;</div><div class=\"line\">          <span class=\"keyword\">for</span>(symbol <span class=\"keyword\">in</span> [read scanImage:cgImageRef]) <span class=\"keyword\">break</span>;</div><div class=\"line\">             qrResult = symbol.data ;</div><div class=\"line\">            <span class=\"keyword\">return</span> qrResult;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure><p></p><p>无图无真相：</p><p><img src=\"http://upload-images.jianshu.io/upload_images/117999-5dae9fc15755140c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"14567CBE-E1D2-4FA7-AFA3-8B2037171F38.jpg\"></p><p>detector的值为nil，也就是说</p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">CIDetector</span> *detector = [<span class=\"built_in\">CIDetector</span> detectorOfType:<span class=\"built_in\">CIDetectorTypeQRCode</span> context:context options:@&#123;<span class=\"built_in\">CIDetectorAccuracy</span>:<span class=\"built_in\">CIDetectorAccuracyHigh</span>&#125;];</div></pre></td></tr></table></figure><p>CIDetector的初始化方法无效。推测是苹果API的问题。</p><h5 id=\"生成二维码图片\"><a href=\"#生成二维码图片\" class=\"headerlink\" title=\"生成二维码图片\"></a>生成二维码图片</h5><p>在<code>iOS8</code>及以上版本使用苹果的<code>API</code>生成二维码图片，代码如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">UIImage</span> *)encodeQRImageWithContent:(<span class=\"built_in\">NSString</span> *)content size:(<span class=\"built_in\">CGSize</span>)size &#123;</div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *codeImage = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (iOS8_OR_LATER) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSData</span> *stringData = [content dataUsingEncoding: <span class=\"built_in\">NSUTF8StringEncoding</span>]; </div><div class=\"line\">        <span class=\"comment\">//生成</span></div><div class=\"line\">      <span class=\"built_in\">CIFilter</span> *qrFilter = [<span class=\"built_in\">CIFilter</span> filterWithName:<span class=\"string\">@\"CIQRCodeGenerator\"</span>];</div><div class=\"line\">      [qrFilter setValue:stringData forKey:<span class=\"string\">@\"inputMessage\"</span>];</div><div class=\"line\">      [qrFilter setValue:<span class=\"string\">@\"M\"</span> forKey:<span class=\"string\">@\"inputCorrectionLevel\"</span>];</div><div class=\"line\">      <span class=\"built_in\">UIColor</span> *onColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">      <span class=\"built_in\">UIColor</span> *offColor = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\">      <span class=\"comment\">//上色</span></div><div class=\"line\">      <span class=\"built_in\">CIFilter</span> *colorFilter = [<span class=\"built_in\">CIFilter</span> filterWithName:<span class=\"string\">@\"CIFalseColor\"</span></div><div class=\"line\">                                         keysAndValues:</div><div class=\"line\">                               <span class=\"string\">@\"inputImage\"</span>,qrFilter.outputImage,</div><div class=\"line\">                               <span class=\"string\">@\"inputColor0\"</span>,[<span class=\"built_in\">CIColor</span> colorWithCGColor:onColor.CGColor],</div><div class=\"line\">                               <span class=\"string\">@\"inputColor1\"</span>,[<span class=\"built_in\">CIColor</span> colorWithCGColor:offColor.CGColor],</div><div class=\"line\">                               <span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">CIImage</span> *qrImage = colorFilter.outputImage;</div><div class=\"line\">      <span class=\"built_in\">CGImageRef</span> cgImage = [[<span class=\"built_in\">CIContext</span> contextWithOptions:<span class=\"literal\">nil</span>] createCGImage:qrImage fromRect:qrImage.extent];</div><div class=\"line\">      <span class=\"built_in\">UIGraphicsBeginImageContext</span>(size);</div><div class=\"line\">      <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</div><div class=\"line\">      <span class=\"built_in\">CGContextSetInterpolationQuality</span>(context, kCGInterpolationNone);</div><div class=\"line\">      <span class=\"built_in\">CGContextScaleCTM</span>(context, <span class=\"number\">1.0</span>, <span class=\"number\">-1.0</span>);</div><div class=\"line\">      <span class=\"built_in\">CGContextDrawImage</span>(context, <span class=\"built_in\">CGContextGetClipBoundingBox</span>(context), cgImage);</div><div class=\"line\">      codeImage = <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class=\"line\">      <span class=\"built_in\">UIGraphicsEndImageContext</span>(); </div><div class=\"line\">      <span class=\"built_in\">CGImageRelease</span>(cgImage);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          codeImage = [QRCodeGenerator qrImageForString:content imageSize:size.width];</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> codeImage;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure><p></p><p><code>iOS8</code>以下使用<code>libqrencode</code>库来生成二维码图片。</p><h4 id=\"代码完善\"><a href=\"#代码完善\" class=\"headerlink\" title=\"代码完善\"></a>代码完善</h4><p><code>2015年12月11日</code></p><p><code>QA</code>测试发现，服务端生成的二维码，使用<code>ZBar</code>识别不出来，但将这张图片保存到相册，然后发送就可以识别出来。最初的想法是要服务端修改生成的二维码，但安卓能够识别出来，此路不通，那只有看ZBar的源码了。<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span> &lt;<span class=\"built_in\">NSFastEnumeration</span>&gt;) scanImage: (<span class=\"built_in\">CGImageRef</span>) image &#123;</div><div class=\"line\">        timer_start;</div><div class=\"line\">        <span class=\"keyword\">int</span> nsyms = [<span class=\"keyword\">self</span> scanImage: image</div><div class=\"line\">                          withScaling: <span class=\"number\">0</span>];</div><div class=\"line\">      <span class=\"comment\">//没有识别出来，判断CGImageRef对象的宽和高是否大于640，大于或等于的话进行缩放再进行扫描</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(!nsyms &amp;&amp;</div><div class=\"line\">           <span class=\"built_in\">CGImageGetWidth</span>(image) &gt;= <span class=\"number\">640</span> &amp;&amp;</div><div class=\"line\">           <span class=\"built_in\">CGImageGetHeight</span>(image) &gt;= <span class=\"number\">640</span>)</div><div class=\"line\">            <span class=\"comment\">// make one more attempt for close up, grainy images</span></div><div class=\"line\">            nsyms = [<span class=\"keyword\">self</span> scanImage: image</div><div class=\"line\">                          withScaling: <span class=\"number\">.5</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSMutableArray</span> *syms = <span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(nsyms) &#123;</div><div class=\"line\">            <span class=\"comment\">// quality/type filtering</span></div><div class=\"line\">            <span class=\"keyword\">int</span> max_quality = MIN_QUALITY;</div><div class=\"line\">            <span class=\"keyword\">for</span>(ZBarSymbol *sym <span class=\"keyword\">in</span> scanner.results) &#123;</div><div class=\"line\">                zbar_symbol_type_t type = sym.type;</div><div class=\"line\">                <span class=\"keyword\">int</span> quality;</div><div class=\"line\">                <span class=\"keyword\">if</span>(type == ZBAR_QRCODE)</div><div class=\"line\">                    quality = INT_MAX;</div><div class=\"line\">                <span class=\"keyword\">else</span></div><div class=\"line\">                    quality = sym.quality;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(quality &lt; max_quality) &#123;</div><div class=\"line\">                    zlog(<span class=\"string\">@\"    type=%d quality=%d &lt; %d\\n\"</span>,</div><div class=\"line\">                         type, quality, max_quality);</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(max_quality &lt; quality) &#123;</div><div class=\"line\">                    max_quality = quality;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(syms)</div><div class=\"line\">                        [syms removeAllObjects];</div><div class=\"line\">                &#125;</div><div class=\"line\">                zlog(<span class=\"string\">@\"    type=%d quality=%d\\n\"</span>, type, quality);</div><div class=\"line\">                <span class=\"keyword\">if</span>(!syms)</div><div class=\"line\">                    syms = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity: <span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">                [syms addObject: sym];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        zlog(<span class=\"string\">@\"read %d filtered symbols in %gs total\\n\"</span>,</div><div class=\"line\">              (!syms) ? <span class=\"number\">0</span> : [syms count], timer_elapsed(t_start, timer_now()));</div><div class=\"line\">        <span class=\"keyword\">return</span>(syms);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span>(max_quality &lt; quality) &#123;</div><div class=\"line\">          max_quality = quality;</div><div class=\"line\">          <span class=\"keyword\">if</span>(syms)</div><div class=\"line\">              [syms removeAllObjects];</div><div class=\"line\">      &#125;</div><div class=\"line\">      zlog(<span class=\"string\">@\"    type=%d quality=%d\\n\"</span>, type, quality);</div><div class=\"line\">      <span class=\"keyword\">if</span>(!syms)</div><div class=\"line\">          syms = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity: <span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">      [syms addObject: sym];</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  zlog(<span class=\"string\">@\"read %d filtered symbols in %gs total\\n\"</span>,</div><div class=\"line\">        (!syms) ? <span class=\"number\">0</span> : [syms count], timer_elapsed(t_start, timer_now()));</div><div class=\"line\">  <span class=\"keyword\">return</span>(syms);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>在这里就产生了一个解决有些二维码图片识别不出来的解决思路：将传过来的<code>UIImage</code>的宽和高设置为640，识别不出来再进行缩放识别。修改<code>UIImage</code>的代码如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">UIImage</span> *)TransformtoSize:(<span class=\"built_in\">CGSize</span>)Newsize &#123;</div><div class=\"line\">    <span class=\"comment\">// 创建一个bitmap的context</span></div><div class=\"line\">    <span class=\"built_in\">UIGraphicsBeginImageContext</span>(Newsize);</div><div class=\"line\">    <span class=\"comment\">// 绘制改变大小的图片</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> drawInRect:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, Newsize.width, Newsize.height)];</div><div class=\"line\">    <span class=\"comment\">// 从当前context中创建一个改变大小后的图片</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *TransformedImg=<span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class=\"line\">    <span class=\"comment\">// 使当前的context出堆栈</span></div><div class=\"line\">    <span class=\"built_in\">UIGraphicsEndImageContext</span>();</div><div class=\"line\">    <span class=\"comment\">// 返回新的改变大小后的图片</span></div><div class=\"line\">    <span class=\"keyword\">return</span> TransformedImg;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>这样类似于将<code>ZXing</code>中的<code>tryHard</code>设置为<code>YES</code>。识别不出来的二维码图片就可以识别了。</p><p><code>2016年5月20日</code><br><code>遗留的bug</code>: 点击进入扫一扫界面，退出，再进入，这样重复5次左右，扫一扫之前的界面的会出现卡顿。<br>原因：多次进入扫一扫界面，再退出，因此界面未被系统回收，captureSession对象一直在运行，会造成内存泄露，引起上一个界面卡顿。<br>解决方案：在视图将要消失的时候，确保captureSession对象停止运行。<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewWillDisappear:(<span class=\"built_in\">BOOL</span>)animated &#123;</div><div class=\"line\">  [<span class=\"keyword\">super</span> viewWillDisappear:animated];</div><div class=\"line\">  <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.captureSession isRunning]) &#123;</div><div class=\"line\">      [<span class=\"keyword\">self</span>.captureSession stopRunning];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>源码和demo请点<a href=\"https://github.com/hua16/QRCodeDemo.git\" target=\"_blank\" rel=\"external\">这里</a><br>参考的文章链接如下<br><a href=\"http://adad184.com/2015/09/30/goodbye-zxing/\" target=\"_blank\" rel=\"external\">再见ZXing 使用系统原生代码处理QRCode</a><br><a href=\"http://blog.cnbluebox.com/blog/2014/08/26/ioser-wei-ma-sao-miao/\" target=\"_blank\" rel=\"external\">IOS二维码扫描,你需要注意的两件事</a><br><a href=\"http://blog.csdn.net/u013738531/article/details/54574262\" target=\"_blank\" rel=\"external\"><a href=\"http://blog.csdn.net/u013738531/article/details/54574262\" target=\"_blank\" rel=\"external\">Zbar算法流程介绍</a></a></p>"},{"title":"iOS布局与Masnory使用实践","author":"leverTsui","author_id":"leverTsui","language":"zh-Hans","date":"2017-11-06T10:46:28.000Z","_content":"##### 前言\n`UI`布局对于`iOS`开发者来说并不陌生，在`iOS6`之前，大家都是通过`UI`控件的`Frame`属性和`Autoresizing Mask`来进行`UI`布局的（简称为手动布局）。`AutoLayout`则是苹果公司在`iOS6`推出的一种基于约束的，描述性的布局系统（简称为自动布局），这里主要从四个方面来阐述iOS布局及实践。\n- 手动布局和自动布局\n- `AutoLayout`原理\n- `AutoLayout`的性能\n- `Masnory`的使用\n\n首先对手动布局和自动布局做一个简单的介绍：\n##### 手动布局和自动布局\n- 手动布局：指的是通过直接修改视图的`frame`属性的方式对界面进行布局。 \n> 对于`IOS`的`app`开发者来说，不会像`Android`开发者一样为很多的屏幕尺寸来做界面适配，因此手动调整 `frame`的方式来布局也能工作良好。但是还是会有一些问题，如设备发生旋转、适配`ipad`等，并且保证视图原来之间的相对关系，则以上的方法都是无法解决的。如果要做这些适配，在`AutoLayout`未出来之前需要编写大量的代码，并且花费大量的调试适配时间。 \n\n- 自动布局：指的是使用`AutoLayout`的方式对界面进行布局。\n\n> `AutoLayout` 是苹果本身提倡的技术，在大部分情况下也能很好的提升开发效率，但是 `AutoLayout `对于复杂视图来说常常会产生严重的性能问题。随着视图数量的增长，`AutoLayout` 带来的 `CPU` 消耗会呈指数级上升。 如果对界面流畅度要求较高（如微博界面），可以通过提前计算好布局，在需要时一次性调整好对应属性 ，或者使用 `ComponentKit`、`AsyncDisplayKit` 等框架来处理界面布局。\n\n下面，我们来分析下 AutoLayout的原理。\n##### AutoLayout的原理 \n这里通过使用`Masonry`来进行布局，从而来分析`AutoLayout`的原理，先简要了解下`Masonry`。\n`Masonry`是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了，并具有高可读性，而且同时支持 `iOS` 和 `Max OS X`。\n`Masnory`支持的常用属性如下：\n```objc\n@property (nonatomic, strong, readonly) MASConstraint *left;     //左侧\n@property (nonatomic, strong, readonly) MASConstraint *top;      //上侧\n@property (nonatomic, strong, readonly) MASConstraint *right;   //右侧\n@property (nonatomic, strong, readonly) MASConstraint *bottom;   //下侧\n@property (nonatomic, strong, readonly) MASConstraint *leading;  //首部\n@property (nonatomic, strong, readonly) MASConstraint *trailing;  //首部\n@property (nonatomic, strong, readonly) MASConstraint *width;    //宽\n@property (nonatomic, strong, readonly) MASConstraint *height;   //高\n@property (nonatomic, strong, readonly) MASConstraint *centerX;  //横向中点\n@property (nonatomic, strong, readonly) MASConstraint *centerY;  //纵向中点\n@property (nonatomic, strong, readonly) MASConstraint *baseline; //文本基线 \n```\n**其中`leading`与`left`，`trailing`与`right` 在正常情况下是等价的，但是当一些布局是从右至左时(比如阿拉伯语) 则会对调。**\n同时，在`Masonry`中能够添加`AutoLayout`约束有三个函数：\n```objc\n- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *make))block;//只负责新增约束` AutoLayout`不能同时存在两条针对于同一对象的约束,否则会报错\n- (NSArray *)mas_updateConstraints:(void(^)(MASConstraintMaker *make))block;//针对上面的情况 会更新在block中出现的约束 不会导致出现两个相同约束的情况\n- (NSArray *)mas_remakeConstraints:(void(^)(MASConstraintMaker *make))block;//则会清除之前的所有约束 仅保留最新的约束\n```\n我们在代码中，经常会使用到`equalTo`和`mas_equalTo`，那它们的区别是什么呢？从代码中找到他们的定义如下：\n```objc\n#define mas_equalTo(...)                 equalTo(MASBoxValue((__VA_ARGS__)))\n...\n#define MASBoxValue(value) _MASBoxValue(@encode(__typeof__((value))), (value))\n```\n可以看到 `mas_equalTo`只是对其参数进行了一个`BOX`操作(装箱) ，所支持的类型，除了`NSNumber`支持的那些数值类型之外，还支持`CGPoint`，`CGSize`和`UIEdgeInsets`类型。\n下面，我们通过一个例子，一步步来看下界面是怎么布局的，代码如下：\n```objc\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = [UIColor blackColor];\n    \n    UIView *v1 = [[UIView alloc] init];\n    v1.backgroundColor = [UIColor orangeColor];\n    [v1 showPlaceHolder];\n    \n    UIView *v2 = [[UIView alloc] init];\n    v2.backgroundColor = [UIColor orangeColor];\n    [v2 showPlaceHolder];\n    \n    UIView *v3 = [[UIView alloc] init];\n    v3.backgroundColor = [UIColor orangeColor];\n    [v3 showPlaceHolder];\n    \n    [self.view addSubview:v1];\n    [self.view addSubview:v2];\n    [self.view addSubview:v3];\n    \n    [v1 mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.mas_equalTo(100);\n        make.leading.mas_equalTo(100);\n        make.width.mas_equalTo(70);\n        make.height.mas_equalTo(65);\n    }];\n    \n    [v2 mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(v1.mas_top);\n        make.leading.mas_equalTo(v1.mas_trailing).offset(20);\n        make.width.equalTo(v1.mas_width);\n        make.height.equalTo(v1.mas_height);\n    }];\n    \n    [v3 mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(v1.mas_bottom).offset(20);\n        make.leading.equalTo(v1.mas_leading);\n        make.trailing.equalTo(v2.mas_trailing);\n        make.height.equalTo(v1.mas_height);\n    }];\n} \n```\n界面运行结果如下图：\n![CD52E302-FAFD-4D6E-9DFF-F5DB44C6098B.png](http://upload-images.jianshu.io/upload_images/5835116-10acd4fa0c0e292c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下面，我们将界面中的左上角的视图视为视图1，右上角的视图视为视图2，底部视图视为视图3，使用`x1、y1、m1、n1`来标识视图1的`left`、`top`、`width`和`height`，以此类推。\n通过以上举例抽象出自动布局数学公式： \n ![1C7344E7-1ED1-421A-B84E-ACBD70F98859.png](http://upload-images.jianshu.io/upload_images/5835116-6ceec51e08a7f571.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n将以上等式变形为：\n\n![8AAD54BE-0157-4591-A117-0094F69BE6E7.png](http://upload-images.jianshu.io/upload_images/5835116-101854d5027207fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n此时，以上方程组，大家肯定很熟悉了，也就是《线性代数》中的线性方程组，现在将以上线性方程组抽象为：\n\n![B5E84F57-07DE-4A15-9D06-3D0ADD7E6EBD.png](http://upload-images.jianshu.io/upload_images/5835116-665ec9939aa6a902.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n上图表示“等式”方程组，那么是否还可以继续抽象？也就是说上述方程组能否完全表示未知元素之间与已知元素之间的关系，显然还不全面，因为还有（<,>,<=,>=）不等关系，因此将“=”等号抽象为关系\"R\",在数学上关系R也就包括了“=”,\"<\",\">\",\"<=\",\">=\"等关系。上述线程方程组变形为：（实质上，AutoLayout中所有的约束确实都是用数学关系式y R ax + b描述）\n\n![9A877277-5DEB-437C-AEF6-D6530AB6FE6F.png](http://upload-images.jianshu.io/upload_images/5835116-8ae25f0ead6f4c29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n现在已经将自动布局一步步抽象为数学公式，那么对视图的布局其实就是对线性方程组的求解。线性方程组解的情况有三种，实质上也对应着自动布局对视图的三种布局方案:\n - 唯一解：所有方程中的未知数能够解出唯一解。 充分约束：给一个视图添加的约束必须是充分的，才能正确布局一个视图；\n - 多个解：未知数不能求解出准确的唯一解，即未知数可能存在多个或者无限个解满足线性方程组。 欠约束：给视图所添加的约束不能够充分的表达视图的准确位置，在这种情况下自动布局会随意给视图一个布局方案，也就是自动布局中视图不能够正确布局或者视图丢失的情况。 \n - 无解：不存在满足线性方程组的解。 冲突约束：给视图添加的约束表达视图布局出现了冲突，比如同时满足同一个视图宽度即为100又为200，这是不可能存在的。此时程序会出现崩溃。\n\n通过以上描述，将`AutoLayout`系统的作用描述如图所示：\n\n![FBB5F53F-0B23-48B2-B150-39B405BFB335.png](http://upload-images.jianshu.io/upload_images/5835116-55978c66c8eea66b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n##### `AutoLayout`的性能\n\n从`AutoLayout`的原理，我们可以得出布局系统最后仍然需要通过`frame`来进行布局，相比原有的布局系统加入了从约束计算 出`frame` 的过程,那么这个过程对性能是否会影响呢？\n你可以在 [**这里**](https://github.com/hua16/summary) 找到这次对 `Layout` 性能测量使用的代码。\n代码分别使用` Auto Layout `、嵌套视图层级中使用 `Auto Layout `和` frame `对 `N` 个视图进行布局，测算其运行时间。\n\n对视图数量在 1~35 之间布局时间进行测量，结果如下：\n\n\n![视图数量范围为 1~35.png](http://upload-images.jianshu.io/upload_images/117999-045780ced38306d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n对视图数量在 10~500 之间布局时间进行测量，结果如下：\n\n![视图数量范围为 10~500.png](http://upload-images.jianshu.io/upload_images/117999-4a5f70dd55e894d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n从上述的测试数据可以看出，**使用`frame`、`AutoLayout`和嵌套视图层级中使用 `Auto Layout`进行布局、对应的视图数量分别为`50`个、`6`个和`12`个，所需要的时间就会在 `16.67 ms `左右。**,而想要让 iOS 应用的视图保持 60 FPS 的刷新频率，我们必须在 1/60 = 16.67 ms 之内完成包括布局、绘制以及渲染等操作。\n综上所述，虽然说 `Auto Layout` 为开发者在多尺寸布局上提供了遍历，而且支持跨越视图层级的约束，但是由于其实现原理导致其时间复杂度为**多项式时间**，其性能损耗是仅使用 `frame` 的十几倍，所以在处理庞大的 `UI `界面时表现差强人意。 \n\n##### `Masnory`的使用\n下面，我们通过4个实例，来了解下`Masnory`的使用。\n- ######case 1: 并排显示两个`label`，宽度由内容决定。父视图宽度不够时，优先显示右边`label`的内容。\n\n在默认情况下，我们没有设置各个布局的优先级，那么他就会优先显示左边的`label`，左边的完全显示后剩余的空间都是右边的`label`，如果整个空间宽度都不够左边的`label`的话，那么右边的`label`就没有显示的机会了。\n如果我们现在的需求是优先显示右边的`label`，左边的`label`内容超出的省略，这时就需要我们调整约束的优先级了。\n`UIView`中关于`Content Hugging` 和` Content Compression Resistance`的方法有：\n```objc\n- (UILayoutPriority)contentHuggingPriorityForAxis:(UILayoutConstraintAxis)axis NS_AVAILABLE_IOS(6_0);\n- (void)setContentHuggingPriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis NS_AVAILABLE_IOS(6_0);\n\n- (UILayoutPriority)contentCompressionResistancePriorityForAxis:(UILayoutConstraintAxis)axis NS_AVAILABLE_IOS(6_0);\n- (void)setContentCompressionResistancePriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis NS_AVAILABLE_IOS(6_0);\n```\n那么这两个东西到底是什么呢？可以这样形象的理解一下：\n- `contentHugging`: 抱住使其在“内容大小”的基础上不能继续变大，这个属性的优先级越高，就要越“抱紧”视图里面的内容。也就是视图的大小不会随着父视图的扩大而扩大。\n- `contentCompression`: 撑住使其在在其“内容大小”的基础上不能继续变小,这个属性的优先级越高，越不“容易”被压缩。也就是说，当整体的空间装不下所有的视图时，`Content Compression Resistance`优先级越高的，显示的内容越完整。\n这两个属性分别可以设置水平方向和垂直方向上的，而且一个默认优先级是250， 一个默认优先级是750. 因为这两个很有可能与其他Constraint冲突，所以优先级较低。\n\n```objc\nstatic const UILayoutPriority UILayoutPriorityRequired NS_AVAILABLE_IOS(6_0) = 1000; // A required constraint.  Do not exceed this.\nstatic const UILayoutPriority UILayoutPriorityDefaultHigh NS_AVAILABLE_IOS(6_0) = 750; // This is the priority level with which a button resists compressing its content.\nstatic const UILayoutPriority UILayoutPriorityDefaultLow NS_AVAILABLE_IOS(6_0) = 250; // This is the priority level at which a button hugs its contents horizontally.\nstatic const UILayoutPriority UILayoutPriorityFittingSizeLevel NS_AVAILABLE_IOS(6_0) = 50; \n```\n\n```objc\n- (void)layoutPageSubViews {\n    \n    [self.leftLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.contentView1.mas_top).with.offset(5);\n        make.left.equalTo(self.contentView1.mas_left).with.offset(2);\n        make.height.equalTo(@40);\n    }];\n    \n    [self.rightLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.equalTo(self.leftLabel.mas_right).with.offset(2);\n        make.top.equalTo(self.contentView1.mas_top).with.offset(5);\n        make.right.lessThanOrEqualTo(self.contentView1.mas_right).with.offset(-2);\n        make.height.equalTo(@40);\n\n    }];\n    \n    [self.leftLabel setContentHuggingPriority:UILayoutPriorityRequired\n                               forAxis:UILayoutConstraintAxisHorizontal];\n    [self.leftLabel setContentCompressionResistancePriority:UILayoutPriorityDefaultLow\n                                             forAxis:UILayoutConstraintAxisHorizontal];\n    \n    [self.rightLabel setContentHuggingPriority:UILayoutPriorityRequired\n                               forAxis:UILayoutConstraintAxisHorizontal];\n    [self.rightLabel setContentCompressionResistancePriority:UILayoutPriorityRequired\n                                             forAxis:UILayoutConstraintAxisHorizontal];\n}\n```\n- ######case 2: 四个`ImageView`整体居中，可以任意显示、隐藏。\n\n![blog_autolayout_example_with_masonry_3.png](http://upload-images.jianshu.io/upload_images/5835116-1334685bb89094f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下面的四个`Switch`控件分别控制上面对应位置的图片是否显示。\n> 分析:首先就是整体居中，为了实现这个，最简单的办法就是将四个图片“装进”一个**容器View**里面，然后让这个容器`View`在整个页面中居中即可。这样就不用控制每个图片的居中效果了。\n然后就是显示与隐藏。在这里我直接控制图片`ImageView`的宽度，宽度为0的时候不就“隐藏”了吗。\n\n具体代码如下：\n\n```objc\n- (void)layoutPageSubViews {\n    \n    [self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.height.mas_equalTo(IMAGE_SIZE);\n        make.centerX.equalTo(self.view.mas_centerX);\n        make.top.equalTo(self.view.mas_top).offset(200);\n    }];\n    \n    //分别设置每个imageView的宽高、左边、垂直中心约束，注意约束的对象\n    //每个View的左边约束和左边的View的右边相等\n    __block UIView *lastView = nil;\n    __block MASConstraint *widthConstraint = nil;\n    NSUInteger arrayCount = self.imageViews.count;\n    [self.imageViews enumerateObjectsUsingBlock:^(UIView *view, NSUInteger idx, BOOL *stop) {\n        [view mas_makeConstraints:^(MASConstraintMaker *make) {\n            make.left.equalTo(lastView ? lastView.mas_right : view.superview.mas_left);\n            make.centerY.equalTo(view.superview.mas_centerY);\n            if (idx == arrayCount - 1) {\n                make.right.equalTo(view.superview.mas_right);\n            }\n            \n            widthConstraint = make.width.mas_equalTo(IMAGE_SIZE);\n            make.height.mas_equalTo(IMAGE_SIZE);\n            \n            [self.widthConstraints addObject:widthConstraint];\n            lastView = view;\n        }];\n    }];\n}\n\n#pragma mark - event response\n//点击switch按钮，如果打开，对应视图的宽约束设置为32，否则，设置为0\n- (IBAction)showOrHideImage:(UISwitch *)sender {\n    NSUInteger index = (NSUInteger) sender.tag;\n    MASConstraint *width = self.widthConstraints[index];\n\n    if (sender.on) {\n        width.mas_equalTo(IMAGE_SIZE);\n    } else {\n        width.mas_equalTo(0);\n    }\n}\n```\n- #####case 3: 子视图的宽度始终是父视图的四分之三（或者任意百分比）\n```objc\n\n  //宽度为父view的宽度的四分之三 \n[subView mas_makeConstraints:^(MASConstraintMaker *make) {\n        //上下左贴边\n        make.left.equalTo(_containerView.mas_left);\n        make.top.equalTo(_containerView.mas_top);\n        make.bottom.equalTo(_containerView.mas_bottom);\n        //宽度为父view的宽度的一半\n        make.width.equalTo(_containerView.mas_width).multipliedBy(0.75);\n    }];\n```\n- #####case 4 给同一个属性添加多重约束，实现复杂关系\n\n```objc\n\n- (void)layoutPageSubviews {\n    \n    [self.greenLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.centerY.equalTo(self.containerView);\n        make.right.lessThanOrEqualTo(self.containerView);\n        make.left.greaterThanOrEqualTo(self.containerView.mas_right).multipliedBy((CGFloat)(1.0f / 3.0f));\n        for (UILabel *label in self.leftLabels) {\n            make.left.greaterThanOrEqualTo(label.mas_right).offset(8);\n        }\n    }];\n    \n    [self.greenLabel setContentCompressionResistancePriority:UILayoutPriorityRequired forAxis:UILayoutConstraintAxisHorizontal];\n}\n``` \n##### 总结\n通过上述分析，我们可以发现：\n- `AutoLayout`的原理就是对线性方程组或者不等式的求解，最终使用`frame`来绘制视图；\n-  使用`AutoLayout`进行布局时， 由于其实现原理导致其时间复杂度为多项式时间，其性能损耗是仅使用 frame 的十几倍，所以在处理庞大的 UI界面时表现差强人意。","source":"_posts/iOS布局与Masnory使用实践.md","raw":"title: iOS布局与Masnory使用实践\nauthor: leverTsui\nauthor_id: leverTsui\nlanguage: zh-Hans\ndate: 2017-11-06 18:46:28 \ntags:\n  - 自动布局 AutoLayout Masnory\ncategories:\n  - iOS 自动布局 \n---\n##### 前言\n`UI`布局对于`iOS`开发者来说并不陌生，在`iOS6`之前，大家都是通过`UI`控件的`Frame`属性和`Autoresizing Mask`来进行`UI`布局的（简称为手动布局）。`AutoLayout`则是苹果公司在`iOS6`推出的一种基于约束的，描述性的布局系统（简称为自动布局），这里主要从四个方面来阐述iOS布局及实践。\n- 手动布局和自动布局\n- `AutoLayout`原理\n- `AutoLayout`的性能\n- `Masnory`的使用\n\n首先对手动布局和自动布局做一个简单的介绍：\n##### 手动布局和自动布局\n- 手动布局：指的是通过直接修改视图的`frame`属性的方式对界面进行布局。 \n> 对于`IOS`的`app`开发者来说，不会像`Android`开发者一样为很多的屏幕尺寸来做界面适配，因此手动调整 `frame`的方式来布局也能工作良好。但是还是会有一些问题，如设备发生旋转、适配`ipad`等，并且保证视图原来之间的相对关系，则以上的方法都是无法解决的。如果要做这些适配，在`AutoLayout`未出来之前需要编写大量的代码，并且花费大量的调试适配时间。 \n\n- 自动布局：指的是使用`AutoLayout`的方式对界面进行布局。\n\n> `AutoLayout` 是苹果本身提倡的技术，在大部分情况下也能很好的提升开发效率，但是 `AutoLayout `对于复杂视图来说常常会产生严重的性能问题。随着视图数量的增长，`AutoLayout` 带来的 `CPU` 消耗会呈指数级上升。 如果对界面流畅度要求较高（如微博界面），可以通过提前计算好布局，在需要时一次性调整好对应属性 ，或者使用 `ComponentKit`、`AsyncDisplayKit` 等框架来处理界面布局。\n\n下面，我们来分析下 AutoLayout的原理。\n##### AutoLayout的原理 \n这里通过使用`Masonry`来进行布局，从而来分析`AutoLayout`的原理，先简要了解下`Masonry`。\n`Masonry`是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了，并具有高可读性，而且同时支持 `iOS` 和 `Max OS X`。\n`Masnory`支持的常用属性如下：\n```objc\n@property (nonatomic, strong, readonly) MASConstraint *left;     //左侧\n@property (nonatomic, strong, readonly) MASConstraint *top;      //上侧\n@property (nonatomic, strong, readonly) MASConstraint *right;   //右侧\n@property (nonatomic, strong, readonly) MASConstraint *bottom;   //下侧\n@property (nonatomic, strong, readonly) MASConstraint *leading;  //首部\n@property (nonatomic, strong, readonly) MASConstraint *trailing;  //首部\n@property (nonatomic, strong, readonly) MASConstraint *width;    //宽\n@property (nonatomic, strong, readonly) MASConstraint *height;   //高\n@property (nonatomic, strong, readonly) MASConstraint *centerX;  //横向中点\n@property (nonatomic, strong, readonly) MASConstraint *centerY;  //纵向中点\n@property (nonatomic, strong, readonly) MASConstraint *baseline; //文本基线 \n```\n**其中`leading`与`left`，`trailing`与`right` 在正常情况下是等价的，但是当一些布局是从右至左时(比如阿拉伯语) 则会对调。**\n同时，在`Masonry`中能够添加`AutoLayout`约束有三个函数：\n```objc\n- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *make))block;//只负责新增约束` AutoLayout`不能同时存在两条针对于同一对象的约束,否则会报错\n- (NSArray *)mas_updateConstraints:(void(^)(MASConstraintMaker *make))block;//针对上面的情况 会更新在block中出现的约束 不会导致出现两个相同约束的情况\n- (NSArray *)mas_remakeConstraints:(void(^)(MASConstraintMaker *make))block;//则会清除之前的所有约束 仅保留最新的约束\n```\n我们在代码中，经常会使用到`equalTo`和`mas_equalTo`，那它们的区别是什么呢？从代码中找到他们的定义如下：\n```objc\n#define mas_equalTo(...)                 equalTo(MASBoxValue((__VA_ARGS__)))\n...\n#define MASBoxValue(value) _MASBoxValue(@encode(__typeof__((value))), (value))\n```\n可以看到 `mas_equalTo`只是对其参数进行了一个`BOX`操作(装箱) ，所支持的类型，除了`NSNumber`支持的那些数值类型之外，还支持`CGPoint`，`CGSize`和`UIEdgeInsets`类型。\n下面，我们通过一个例子，一步步来看下界面是怎么布局的，代码如下：\n```objc\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = [UIColor blackColor];\n    \n    UIView *v1 = [[UIView alloc] init];\n    v1.backgroundColor = [UIColor orangeColor];\n    [v1 showPlaceHolder];\n    \n    UIView *v2 = [[UIView alloc] init];\n    v2.backgroundColor = [UIColor orangeColor];\n    [v2 showPlaceHolder];\n    \n    UIView *v3 = [[UIView alloc] init];\n    v3.backgroundColor = [UIColor orangeColor];\n    [v3 showPlaceHolder];\n    \n    [self.view addSubview:v1];\n    [self.view addSubview:v2];\n    [self.view addSubview:v3];\n    \n    [v1 mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.mas_equalTo(100);\n        make.leading.mas_equalTo(100);\n        make.width.mas_equalTo(70);\n        make.height.mas_equalTo(65);\n    }];\n    \n    [v2 mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(v1.mas_top);\n        make.leading.mas_equalTo(v1.mas_trailing).offset(20);\n        make.width.equalTo(v1.mas_width);\n        make.height.equalTo(v1.mas_height);\n    }];\n    \n    [v3 mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(v1.mas_bottom).offset(20);\n        make.leading.equalTo(v1.mas_leading);\n        make.trailing.equalTo(v2.mas_trailing);\n        make.height.equalTo(v1.mas_height);\n    }];\n} \n```\n界面运行结果如下图：\n![CD52E302-FAFD-4D6E-9DFF-F5DB44C6098B.png](http://upload-images.jianshu.io/upload_images/5835116-10acd4fa0c0e292c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下面，我们将界面中的左上角的视图视为视图1，右上角的视图视为视图2，底部视图视为视图3，使用`x1、y1、m1、n1`来标识视图1的`left`、`top`、`width`和`height`，以此类推。\n通过以上举例抽象出自动布局数学公式： \n ![1C7344E7-1ED1-421A-B84E-ACBD70F98859.png](http://upload-images.jianshu.io/upload_images/5835116-6ceec51e08a7f571.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n将以上等式变形为：\n\n![8AAD54BE-0157-4591-A117-0094F69BE6E7.png](http://upload-images.jianshu.io/upload_images/5835116-101854d5027207fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n此时，以上方程组，大家肯定很熟悉了，也就是《线性代数》中的线性方程组，现在将以上线性方程组抽象为：\n\n![B5E84F57-07DE-4A15-9D06-3D0ADD7E6EBD.png](http://upload-images.jianshu.io/upload_images/5835116-665ec9939aa6a902.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n上图表示“等式”方程组，那么是否还可以继续抽象？也就是说上述方程组能否完全表示未知元素之间与已知元素之间的关系，显然还不全面，因为还有（<,>,<=,>=）不等关系，因此将“=”等号抽象为关系\"R\",在数学上关系R也就包括了“=”,\"<\",\">\",\"<=\",\">=\"等关系。上述线程方程组变形为：（实质上，AutoLayout中所有的约束确实都是用数学关系式y R ax + b描述）\n\n![9A877277-5DEB-437C-AEF6-D6530AB6FE6F.png](http://upload-images.jianshu.io/upload_images/5835116-8ae25f0ead6f4c29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n现在已经将自动布局一步步抽象为数学公式，那么对视图的布局其实就是对线性方程组的求解。线性方程组解的情况有三种，实质上也对应着自动布局对视图的三种布局方案:\n - 唯一解：所有方程中的未知数能够解出唯一解。 充分约束：给一个视图添加的约束必须是充分的，才能正确布局一个视图；\n - 多个解：未知数不能求解出准确的唯一解，即未知数可能存在多个或者无限个解满足线性方程组。 欠约束：给视图所添加的约束不能够充分的表达视图的准确位置，在这种情况下自动布局会随意给视图一个布局方案，也就是自动布局中视图不能够正确布局或者视图丢失的情况。 \n - 无解：不存在满足线性方程组的解。 冲突约束：给视图添加的约束表达视图布局出现了冲突，比如同时满足同一个视图宽度即为100又为200，这是不可能存在的。此时程序会出现崩溃。\n\n通过以上描述，将`AutoLayout`系统的作用描述如图所示：\n\n![FBB5F53F-0B23-48B2-B150-39B405BFB335.png](http://upload-images.jianshu.io/upload_images/5835116-55978c66c8eea66b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n##### `AutoLayout`的性能\n\n从`AutoLayout`的原理，我们可以得出布局系统最后仍然需要通过`frame`来进行布局，相比原有的布局系统加入了从约束计算 出`frame` 的过程,那么这个过程对性能是否会影响呢？\n你可以在 [**这里**](https://github.com/hua16/summary) 找到这次对 `Layout` 性能测量使用的代码。\n代码分别使用` Auto Layout `、嵌套视图层级中使用 `Auto Layout `和` frame `对 `N` 个视图进行布局，测算其运行时间。\n\n对视图数量在 1~35 之间布局时间进行测量，结果如下：\n\n\n![视图数量范围为 1~35.png](http://upload-images.jianshu.io/upload_images/117999-045780ced38306d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n对视图数量在 10~500 之间布局时间进行测量，结果如下：\n\n![视图数量范围为 10~500.png](http://upload-images.jianshu.io/upload_images/117999-4a5f70dd55e894d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n从上述的测试数据可以看出，**使用`frame`、`AutoLayout`和嵌套视图层级中使用 `Auto Layout`进行布局、对应的视图数量分别为`50`个、`6`个和`12`个，所需要的时间就会在 `16.67 ms `左右。**,而想要让 iOS 应用的视图保持 60 FPS 的刷新频率，我们必须在 1/60 = 16.67 ms 之内完成包括布局、绘制以及渲染等操作。\n综上所述，虽然说 `Auto Layout` 为开发者在多尺寸布局上提供了遍历，而且支持跨越视图层级的约束，但是由于其实现原理导致其时间复杂度为**多项式时间**，其性能损耗是仅使用 `frame` 的十几倍，所以在处理庞大的 `UI `界面时表现差强人意。 \n\n##### `Masnory`的使用\n下面，我们通过4个实例，来了解下`Masnory`的使用。\n- ######case 1: 并排显示两个`label`，宽度由内容决定。父视图宽度不够时，优先显示右边`label`的内容。\n\n在默认情况下，我们没有设置各个布局的优先级，那么他就会优先显示左边的`label`，左边的完全显示后剩余的空间都是右边的`label`，如果整个空间宽度都不够左边的`label`的话，那么右边的`label`就没有显示的机会了。\n如果我们现在的需求是优先显示右边的`label`，左边的`label`内容超出的省略，这时就需要我们调整约束的优先级了。\n`UIView`中关于`Content Hugging` 和` Content Compression Resistance`的方法有：\n```objc\n- (UILayoutPriority)contentHuggingPriorityForAxis:(UILayoutConstraintAxis)axis NS_AVAILABLE_IOS(6_0);\n- (void)setContentHuggingPriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis NS_AVAILABLE_IOS(6_0);\n\n- (UILayoutPriority)contentCompressionResistancePriorityForAxis:(UILayoutConstraintAxis)axis NS_AVAILABLE_IOS(6_0);\n- (void)setContentCompressionResistancePriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis NS_AVAILABLE_IOS(6_0);\n```\n那么这两个东西到底是什么呢？可以这样形象的理解一下：\n- `contentHugging`: 抱住使其在“内容大小”的基础上不能继续变大，这个属性的优先级越高，就要越“抱紧”视图里面的内容。也就是视图的大小不会随着父视图的扩大而扩大。\n- `contentCompression`: 撑住使其在在其“内容大小”的基础上不能继续变小,这个属性的优先级越高，越不“容易”被压缩。也就是说，当整体的空间装不下所有的视图时，`Content Compression Resistance`优先级越高的，显示的内容越完整。\n这两个属性分别可以设置水平方向和垂直方向上的，而且一个默认优先级是250， 一个默认优先级是750. 因为这两个很有可能与其他Constraint冲突，所以优先级较低。\n\n```objc\nstatic const UILayoutPriority UILayoutPriorityRequired NS_AVAILABLE_IOS(6_0) = 1000; // A required constraint.  Do not exceed this.\nstatic const UILayoutPriority UILayoutPriorityDefaultHigh NS_AVAILABLE_IOS(6_0) = 750; // This is the priority level with which a button resists compressing its content.\nstatic const UILayoutPriority UILayoutPriorityDefaultLow NS_AVAILABLE_IOS(6_0) = 250; // This is the priority level at which a button hugs its contents horizontally.\nstatic const UILayoutPriority UILayoutPriorityFittingSizeLevel NS_AVAILABLE_IOS(6_0) = 50; \n```\n\n```objc\n- (void)layoutPageSubViews {\n    \n    [self.leftLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.contentView1.mas_top).with.offset(5);\n        make.left.equalTo(self.contentView1.mas_left).with.offset(2);\n        make.height.equalTo(@40);\n    }];\n    \n    [self.rightLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.equalTo(self.leftLabel.mas_right).with.offset(2);\n        make.top.equalTo(self.contentView1.mas_top).with.offset(5);\n        make.right.lessThanOrEqualTo(self.contentView1.mas_right).with.offset(-2);\n        make.height.equalTo(@40);\n\n    }];\n    \n    [self.leftLabel setContentHuggingPriority:UILayoutPriorityRequired\n                               forAxis:UILayoutConstraintAxisHorizontal];\n    [self.leftLabel setContentCompressionResistancePriority:UILayoutPriorityDefaultLow\n                                             forAxis:UILayoutConstraintAxisHorizontal];\n    \n    [self.rightLabel setContentHuggingPriority:UILayoutPriorityRequired\n                               forAxis:UILayoutConstraintAxisHorizontal];\n    [self.rightLabel setContentCompressionResistancePriority:UILayoutPriorityRequired\n                                             forAxis:UILayoutConstraintAxisHorizontal];\n}\n```\n- ######case 2: 四个`ImageView`整体居中，可以任意显示、隐藏。\n\n![blog_autolayout_example_with_masonry_3.png](http://upload-images.jianshu.io/upload_images/5835116-1334685bb89094f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下面的四个`Switch`控件分别控制上面对应位置的图片是否显示。\n> 分析:首先就是整体居中，为了实现这个，最简单的办法就是将四个图片“装进”一个**容器View**里面，然后让这个容器`View`在整个页面中居中即可。这样就不用控制每个图片的居中效果了。\n然后就是显示与隐藏。在这里我直接控制图片`ImageView`的宽度，宽度为0的时候不就“隐藏”了吗。\n\n具体代码如下：\n\n```objc\n- (void)layoutPageSubViews {\n    \n    [self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.height.mas_equalTo(IMAGE_SIZE);\n        make.centerX.equalTo(self.view.mas_centerX);\n        make.top.equalTo(self.view.mas_top).offset(200);\n    }];\n    \n    //分别设置每个imageView的宽高、左边、垂直中心约束，注意约束的对象\n    //每个View的左边约束和左边的View的右边相等\n    __block UIView *lastView = nil;\n    __block MASConstraint *widthConstraint = nil;\n    NSUInteger arrayCount = self.imageViews.count;\n    [self.imageViews enumerateObjectsUsingBlock:^(UIView *view, NSUInteger idx, BOOL *stop) {\n        [view mas_makeConstraints:^(MASConstraintMaker *make) {\n            make.left.equalTo(lastView ? lastView.mas_right : view.superview.mas_left);\n            make.centerY.equalTo(view.superview.mas_centerY);\n            if (idx == arrayCount - 1) {\n                make.right.equalTo(view.superview.mas_right);\n            }\n            \n            widthConstraint = make.width.mas_equalTo(IMAGE_SIZE);\n            make.height.mas_equalTo(IMAGE_SIZE);\n            \n            [self.widthConstraints addObject:widthConstraint];\n            lastView = view;\n        }];\n    }];\n}\n\n#pragma mark - event response\n//点击switch按钮，如果打开，对应视图的宽约束设置为32，否则，设置为0\n- (IBAction)showOrHideImage:(UISwitch *)sender {\n    NSUInteger index = (NSUInteger) sender.tag;\n    MASConstraint *width = self.widthConstraints[index];\n\n    if (sender.on) {\n        width.mas_equalTo(IMAGE_SIZE);\n    } else {\n        width.mas_equalTo(0);\n    }\n}\n```\n- #####case 3: 子视图的宽度始终是父视图的四分之三（或者任意百分比）\n```objc\n\n  //宽度为父view的宽度的四分之三 \n[subView mas_makeConstraints:^(MASConstraintMaker *make) {\n        //上下左贴边\n        make.left.equalTo(_containerView.mas_left);\n        make.top.equalTo(_containerView.mas_top);\n        make.bottom.equalTo(_containerView.mas_bottom);\n        //宽度为父view的宽度的一半\n        make.width.equalTo(_containerView.mas_width).multipliedBy(0.75);\n    }];\n```\n- #####case 4 给同一个属性添加多重约束，实现复杂关系\n\n```objc\n\n- (void)layoutPageSubviews {\n    \n    [self.greenLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.centerY.equalTo(self.containerView);\n        make.right.lessThanOrEqualTo(self.containerView);\n        make.left.greaterThanOrEqualTo(self.containerView.mas_right).multipliedBy((CGFloat)(1.0f / 3.0f));\n        for (UILabel *label in self.leftLabels) {\n            make.left.greaterThanOrEqualTo(label.mas_right).offset(8);\n        }\n    }];\n    \n    [self.greenLabel setContentCompressionResistancePriority:UILayoutPriorityRequired forAxis:UILayoutConstraintAxisHorizontal];\n}\n``` \n##### 总结\n通过上述分析，我们可以发现：\n- `AutoLayout`的原理就是对线性方程组或者不等式的求解，最终使用`frame`来绘制视图；\n-  使用`AutoLayout`进行布局时， 由于其实现原理导致其时间复杂度为多项式时间，其性能损耗是仅使用 frame 的十几倍，所以在处理庞大的 UI界面时表现差强人意。","slug":"iOS布局与Masnory使用实践","published":1,"updated":"2017-11-06T11:27:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r4ahlp00022npwtdzuvmk6","content":"<h5 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h5><p><code>UI</code>布局对于<code>iOS</code>开发者来说并不陌生，在<code>iOS6</code>之前，大家都是通过<code>UI</code>控件的<code>Frame</code>属性和<code>Autoresizing Mask</code>来进行<code>UI</code>布局的（简称为手动布局）。<code>AutoLayout</code>则是苹果公司在<code>iOS6</code>推出的一种基于约束的，描述性的布局系统（简称为自动布局），这里主要从四个方面来阐述iOS布局及实践。</p><ul><li>手动布局和自动布局</li><li><code>AutoLayout</code>原理</li><li><code>AutoLayout</code>的性能</li><li><code>Masnory</code>的使用</li></ul><p>首先对手动布局和自动布局做一个简单的介绍：</p><h5 id=\"手动布局和自动布局\"><a href=\"#手动布局和自动布局\" class=\"headerlink\" title=\"手动布局和自动布局\"></a>手动布局和自动布局</h5><ul><li><p>手动布局：指的是通过直接修改视图的<code>frame</code>属性的方式对界面进行布局。</p><blockquote><p>对于<code>IOS</code>的<code>app</code>开发者来说，不会像<code>Android</code>开发者一样为很多的屏幕尺寸来做界面适配，因此手动调整 <code>frame</code>的方式来布局也能工作良好。但是还是会有一些问题，如设备发生旋转、适配<code>ipad</code>等，并且保证视图原来之间的相对关系，则以上的方法都是无法解决的。如果要做这些适配，在<code>AutoLayout</code>未出来之前需要编写大量的代码，并且花费大量的调试适配时间。</p></blockquote></li><li><p>自动布局：指的是使用<code>AutoLayout</code>的方式对界面进行布局。</p></li></ul><blockquote><p><code>AutoLayout</code> 是苹果本身提倡的技术，在大部分情况下也能很好的提升开发效率，但是 <code>AutoLayout</code>对于复杂视图来说常常会产生严重的性能问题。随着视图数量的增长，<code>AutoLayout</code> 带来的 <code>CPU</code> 消耗会呈指数级上升。 如果对界面流畅度要求较高（如微博界面），可以通过提前计算好布局，在需要时一次性调整好对应属性 ，或者使用 <code>ComponentKit</code>、<code>AsyncDisplayKit</code> 等框架来处理界面布局。</p></blockquote><p>下面，我们来分析下 AutoLayout的原理。</p><h5 id=\"AutoLayout的原理\"><a href=\"#AutoLayout的原理\" class=\"headerlink\" title=\"AutoLayout的原理\"></a>AutoLayout的原理</h5><p>这里通过使用<code>Masonry</code>来进行布局，从而来分析<code>AutoLayout</code>的原理，先简要了解下<code>Masonry</code>。<br><code>Masonry</code>是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了，并具有高可读性，而且同时支持 <code>iOS</code> 和 <code>Max OS X</code>。<br><code>Masnory</code>支持的常用属性如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *left;     <span class=\"comment\">//左侧</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *top;      <span class=\"comment\">//上侧</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *right;   <span class=\"comment\">//右侧</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *bottom;   <span class=\"comment\">//下侧</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *leading;  <span class=\"comment\">//首部</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *trailing;  <span class=\"comment\">//首部</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *width;    <span class=\"comment\">//宽</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *height;   <span class=\"comment\">//高</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *centerX;  <span class=\"comment\">//横向中点</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *centerY;  <span class=\"comment\">//纵向中点</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *baseline; <span class=\"comment\">//文本基线</span></div></pre></td></tr></table></figure><p></p><p><strong>其中<code>leading</code>与<code>left</code>，<code>trailing</code>与<code>right</code> 在正常情况下是等价的，但是当一些布局是从右至左时(比如阿拉伯语) 则会对调。</strong><br>同时，在<code>Masonry</code>中能够添加<code>AutoLayout</code>约束有三个函数：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_makeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;<span class=\"comment\">//只负责新增约束` AutoLayout`不能同时存在两条针对于同一对象的约束,否则会报错</span></div><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_updateConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;<span class=\"comment\">//针对上面的情况 会更新在block中出现的约束 不会导致出现两个相同约束的情况</span></div><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_remakeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;<span class=\"comment\">//则会清除之前的所有约束 仅保留最新的约束</span></div></pre></td></tr></table></figure><p></p><p>我们在代码中，经常会使用到<code>equalTo</code>和<code>mas_equalTo</code>，那它们的区别是什么呢？从代码中找到他们的定义如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#define mas_equalTo(...)                 equalTo(MASBoxValue((__VA_ARGS__)))</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">#define MASBoxValue(value) _MASBoxValue(@encode(__typeof__((value))), (value))</span></div></pre></td></tr></table></figure><p></p><p>可以看到 <code>mas_equalTo</code>只是对其参数进行了一个<code>BOX</code>操作(装箱) ，所支持的类型，除了<code>NSNumber</code>支持的那些数值类型之外，还支持<code>CGPoint</code>，<code>CGSize</code>和<code>UIEdgeInsets</code>类型。<br>下面，我们通过一个例子，一步步来看下界面是怎么布局的，代码如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIView</span> *v1 = [[<span class=\"built_in\">UIView</span> alloc] init];</div><div class=\"line\">    v1.backgroundColor = [<span class=\"built_in\">UIColor</span> orangeColor];</div><div class=\"line\">    [v1 showPlaceHolder];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIView</span> *v2 = [[<span class=\"built_in\">UIView</span> alloc] init];</div><div class=\"line\">    v2.backgroundColor = [<span class=\"built_in\">UIColor</span> orangeColor];</div><div class=\"line\">    [v2 showPlaceHolder];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIView</span> *v3 = [[<span class=\"built_in\">UIView</span> alloc] init];</div><div class=\"line\">    v3.backgroundColor = [<span class=\"built_in\">UIColor</span> orangeColor];</div><div class=\"line\">    [v3 showPlaceHolder];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:v1];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:v2];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:v3];</div><div class=\"line\">    </div><div class=\"line\">    [v1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.mas_equalTo(<span class=\"number\">100</span>);</div><div class=\"line\">        make.leading.mas_equalTo(<span class=\"number\">100</span>);</div><div class=\"line\">        make.width.mas_equalTo(<span class=\"number\">70</span>);</div><div class=\"line\">        make.height.mas_equalTo(<span class=\"number\">65</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [v2 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.equalTo(v1.mas_top);</div><div class=\"line\">        make.leading.mas_equalTo(v1.mas_trailing).offset(<span class=\"number\">20</span>);</div><div class=\"line\">        make.width.equalTo(v1.mas_width);</div><div class=\"line\">        make.height.equalTo(v1.mas_height);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [v3 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.equalTo(v1.mas_bottom).offset(<span class=\"number\">20</span>);</div><div class=\"line\">        make.leading.equalTo(v1.mas_leading);</div><div class=\"line\">        make.trailing.equalTo(v2.mas_trailing);</div><div class=\"line\">        make.height.equalTo(v1.mas_height);</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>界面运行结果如下图：<br><img src=\"http://upload-images.jianshu.io/upload_images/5835116-10acd4fa0c0e292c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"CD52E302-FAFD-4D6E-9DFF-F5DB44C6098B.png\"><br>下面，我们将界面中的左上角的视图视为视图1，右上角的视图视为视图2，底部视图视为视图3，使用<code>x1、y1、m1、n1</code>来标识视图1的<code>left</code>、<code>top</code>、<code>width</code>和<code>height</code>，以此类推。<br>通过以上举例抽象出自动布局数学公式：<br><img src=\"http://upload-images.jianshu.io/upload_images/5835116-6ceec51e08a7f571.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1C7344E7-1ED1-421A-B84E-ACBD70F98859.png\"><br>将以上等式变形为：</p><p><img src=\"http://upload-images.jianshu.io/upload_images/5835116-101854d5027207fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"8AAD54BE-0157-4591-A117-0094F69BE6E7.png\"><br>此时，以上方程组，大家肯定很熟悉了，也就是《线性代数》中的线性方程组，现在将以上线性方程组抽象为：</p><p><img src=\"http://upload-images.jianshu.io/upload_images/5835116-665ec9939aa6a902.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"B5E84F57-07DE-4A15-9D06-3D0ADD7E6EBD.png\"><br>上图表示“等式”方程组，那么是否还可以继续抽象？也就是说上述方程组能否完全表示未知元素之间与已知元素之间的关系，显然还不全面，因为还有（&lt;,&gt;,&lt;=,&gt;=）不等关系，因此将“=”等号抽象为关系”R”,在数学上关系R也就包括了“=”,”&lt;”,”&gt;”,”&lt;=”,”&gt;=”等关系。上述线程方程组变形为：（实质上，AutoLayout中所有的约束确实都是用数学关系式y R ax + b描述）</p><p><img src=\"http://upload-images.jianshu.io/upload_images/5835116-8ae25f0ead6f4c29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"9A877277-5DEB-437C-AEF6-D6530AB6FE6F.png\"><br>现在已经将自动布局一步步抽象为数学公式，那么对视图的布局其实就是对线性方程组的求解。线性方程组解的情况有三种，实质上也对应着自动布局对视图的三种布局方案:</p><ul><li>唯一解：所有方程中的未知数能够解出唯一解。 充分约束：给一个视图添加的约束必须是充分的，才能正确布局一个视图；</li><li>多个解：未知数不能求解出准确的唯一解，即未知数可能存在多个或者无限个解满足线性方程组。 欠约束：给视图所添加的约束不能够充分的表达视图的准确位置，在这种情况下自动布局会随意给视图一个布局方案，也就是自动布局中视图不能够正确布局或者视图丢失的情况。</li><li>无解：不存在满足线性方程组的解。 冲突约束：给视图添加的约束表达视图布局出现了冲突，比如同时满足同一个视图宽度即为100又为200，这是不可能存在的。此时程序会出现崩溃。</li></ul><p>通过以上描述，将<code>AutoLayout</code>系统的作用描述如图所示：</p><p><img src=\"http://upload-images.jianshu.io/upload_images/5835116-55978c66c8eea66b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"FBB5F53F-0B23-48B2-B150-39B405BFB335.png\"></p><h5 id=\"AutoLayout的性能\"><a href=\"#AutoLayout的性能\" class=\"headerlink\" title=\"AutoLayout的性能\"></a><code>AutoLayout</code>的性能</h5><p>从<code>AutoLayout</code>的原理，我们可以得出布局系统最后仍然需要通过<code>frame</code>来进行布局，相比原有的布局系统加入了从约束计算 出<code>frame</code> 的过程,那么这个过程对性能是否会影响呢？<br>你可以在 <a href=\"https://github.com/hua16/summary\" target=\"_blank\" rel=\"external\"><strong>这里</strong></a> 找到这次对 <code>Layout</code> 性能测量使用的代码。<br>代码分别使用<code>Auto Layout</code>、嵌套视图层级中使用 <code>Auto Layout</code>和<code>frame</code>对 <code>N</code> 个视图进行布局，测算其运行时间。</p><p>对视图数量在 1~35 之间布局时间进行测量，结果如下：</p><p><img src=\"http://upload-images.jianshu.io/upload_images/117999-045780ced38306d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"视图数量范围为 1~35.png\"></p><p>对视图数量在 10~500 之间布局时间进行测量，结果如下：</p><p><img src=\"http://upload-images.jianshu.io/upload_images/117999-4a5f70dd55e894d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"视图数量范围为 10~500.png\"><br>从上述的测试数据可以看出，<strong>使用<code>frame</code>、<code>AutoLayout</code>和嵌套视图层级中使用 <code>Auto Layout</code>进行布局、对应的视图数量分别为<code>50</code>个、<code>6</code>个和<code>12</code>个，所需要的时间就会在 <code>16.67 ms</code>左右。</strong>,而想要让 iOS 应用的视图保持 60 FPS 的刷新频率，我们必须在 1/60 = 16.67 ms 之内完成包括布局、绘制以及渲染等操作。<br>综上所述，虽然说 <code>Auto Layout</code> 为开发者在多尺寸布局上提供了遍历，而且支持跨越视图层级的约束，但是由于其实现原理导致其时间复杂度为<strong>多项式时间</strong>，其性能损耗是仅使用 <code>frame</code> 的十几倍，所以在处理庞大的 <code>UI</code>界面时表现差强人意。</p><h5 id=\"Masnory的使用\"><a href=\"#Masnory的使用\" class=\"headerlink\" title=\"Masnory的使用\"></a><code>Masnory</code>的使用</h5><p>下面，我们通过4个实例，来了解下<code>Masnory</code>的使用。</p><ul><li>######case 1: 并排显示两个<code>label</code>，宽度由内容决定。父视图宽度不够时，优先显示右边<code>label</code>的内容。</li></ul><p>在默认情况下，我们没有设置各个布局的优先级，那么他就会优先显示左边的<code>label</code>，左边的完全显示后剩余的空间都是右边的<code>label</code>，如果整个空间宽度都不够左边的<code>label</code>的话，那么右边的<code>label</code>就没有显示的机会了。<br>如果我们现在的需求是优先显示右边的<code>label</code>，左边的<code>label</code>内容超出的省略，这时就需要我们调整约束的优先级了。<br><code>UIView</code>中关于<code>Content Hugging</code> 和<code>Content Compression Resistance</code>的方法有：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">UILayoutPriority</span>)contentHuggingPriorityForAxis:(<span class=\"built_in\">UILayoutConstraintAxis</span>)axis <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0);</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setContentHuggingPriority:(<span class=\"built_in\">UILayoutPriority</span>)priority forAxis:(<span class=\"built_in\">UILayoutConstraintAxis</span>)axis <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0);</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">UILayoutPriority</span>)contentCompressionResistancePriorityForAxis:(<span class=\"built_in\">UILayoutConstraintAxis</span>)axis <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0);</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setContentCompressionResistancePriority:(<span class=\"built_in\">UILayoutPriority</span>)priority forAxis:(<span class=\"built_in\">UILayoutConstraintAxis</span>)axis <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0);</div></pre></td></tr></table></figure><p></p><p>那么这两个东西到底是什么呢？可以这样形象的理解一下：</p><ul><li><code>contentHugging</code>: 抱住使其在“内容大小”的基础上不能继续变大，这个属性的优先级越高，就要越“抱紧”视图里面的内容。也就是视图的大小不会随着父视图的扩大而扩大。</li><li><code>contentCompression</code>: 撑住使其在在其“内容大小”的基础上不能继续变小,这个属性的优先级越高，越不“容易”被压缩。也就是说，当整体的空间装不下所有的视图时，<code>Content Compression Resistance</code>优先级越高的，显示的内容越完整。<br>这两个属性分别可以设置水平方向和垂直方向上的，而且一个默认优先级是250， 一个默认优先级是750. 因为这两个很有可能与其他Constraint冲突，所以优先级较低。</li></ul><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"built_in\">UILayoutPriority</span> <span class=\"built_in\">UILayoutPriorityRequired</span> <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0) = <span class=\"number\">1000</span>; <span class=\"comment\">// A required constraint.  Do not exceed this.</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"built_in\">UILayoutPriority</span> <span class=\"built_in\">UILayoutPriorityDefaultHigh</span> <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0) = <span class=\"number\">750</span>; <span class=\"comment\">// This is the priority level with which a button resists compressing its content.</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"built_in\">UILayoutPriority</span> <span class=\"built_in\">UILayoutPriorityDefaultLow</span> <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0) = <span class=\"number\">250</span>; <span class=\"comment\">// This is the priority level at which a button hugs its contents horizontally.</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"built_in\">UILayoutPriority</span> <span class=\"built_in\">UILayoutPriorityFittingSizeLevel</span> <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0) = <span class=\"number\">50</span>;</div></pre></td></tr></table></figure><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)layoutPageSubViews &#123;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.leftLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.equalTo(<span class=\"keyword\">self</span>.contentView1.mas_top).with.offset(<span class=\"number\">5</span>);</div><div class=\"line\">        make.left.equalTo(<span class=\"keyword\">self</span>.contentView1.mas_left).with.offset(<span class=\"number\">2</span>);</div><div class=\"line\">        make.height.equalTo(@<span class=\"number\">40</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.rightLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.left.equalTo(<span class=\"keyword\">self</span>.leftLabel.mas_right).with.offset(<span class=\"number\">2</span>);</div><div class=\"line\">        make.top.equalTo(<span class=\"keyword\">self</span>.contentView1.mas_top).with.offset(<span class=\"number\">5</span>);</div><div class=\"line\">        make.right.lessThanOrEqualTo(<span class=\"keyword\">self</span>.contentView1.mas_right).with.offset(<span class=\"number\">-2</span>);</div><div class=\"line\">        make.height.equalTo(@<span class=\"number\">40</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.leftLabel setContentHuggingPriority:<span class=\"built_in\">UILayoutPriorityRequired</span></div><div class=\"line\">                               forAxis:<span class=\"built_in\">UILayoutConstraintAxisHorizontal</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.leftLabel setContentCompressionResistancePriority:<span class=\"built_in\">UILayoutPriorityDefaultLow</span></div><div class=\"line\">                                             forAxis:<span class=\"built_in\">UILayoutConstraintAxisHorizontal</span>];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.rightLabel setContentHuggingPriority:<span class=\"built_in\">UILayoutPriorityRequired</span></div><div class=\"line\">                               forAxis:<span class=\"built_in\">UILayoutConstraintAxisHorizontal</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.rightLabel setContentCompressionResistancePriority:<span class=\"built_in\">UILayoutPriorityRequired</span></div><div class=\"line\">                                             forAxis:<span class=\"built_in\">UILayoutConstraintAxisHorizontal</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><ul><li>######case 2: 四个<code>ImageView</code>整体居中，可以任意显示、隐藏。</li></ul><p><img src=\"http://upload-images.jianshu.io/upload_images/5835116-1334685bb89094f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"blog_autolayout_example_with_masonry_3.png\"></p><p>下面的四个<code>Switch</code>控件分别控制上面对应位置的图片是否显示。</p><blockquote><p>分析:首先就是整体居中，为了实现这个，最简单的办法就是将四个图片“装进”一个<strong>容器View</strong>里面，然后让这个容器<code>View</code>在整个页面中居中即可。这样就不用控制每个图片的居中效果了。<br>然后就是显示与隐藏。在这里我直接控制图片<code>ImageView</code>的宽度，宽度为0的时候不就“隐藏”了吗。</p></blockquote><p>具体代码如下：</p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)layoutPageSubViews &#123;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.containerView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.height.mas_equalTo(IMAGE_SIZE);</div><div class=\"line\">        make.centerX.equalTo(<span class=\"keyword\">self</span>.view.mas_centerX);</div><div class=\"line\">        make.top.equalTo(<span class=\"keyword\">self</span>.view.mas_top).offset(<span class=\"number\">200</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//分别设置每个imageView的宽高、左边、垂直中心约束，注意约束的对象</span></div><div class=\"line\">    <span class=\"comment\">//每个View的左边约束和左边的View的右边相等</span></div><div class=\"line\">    __block <span class=\"built_in\">UIView</span> *lastView = <span class=\"literal\">nil</span>;</div><div class=\"line\">    __block MASConstraint *widthConstraint = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"built_in\">NSUInteger</span> arrayCount = <span class=\"keyword\">self</span>.imageViews.count;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.imageViews enumerateObjectsUsingBlock:^(<span class=\"built_in\">UIView</span> *view, <span class=\"built_in\">NSUInteger</span> idx, <span class=\"built_in\">BOOL</span> *stop) &#123;</div><div class=\"line\">        [view mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">            make.left.equalTo(lastView ? lastView.mas_right : view.superview.mas_left);</div><div class=\"line\">            make.centerY.equalTo(view.superview.mas_centerY);</div><div class=\"line\">            <span class=\"keyword\">if</span> (idx == arrayCount - <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                make.right.equalTo(view.superview.mas_right);</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            widthConstraint = make.width.mas_equalTo(IMAGE_SIZE);</div><div class=\"line\">            make.height.mas_equalTo(IMAGE_SIZE);</div><div class=\"line\">            </div><div class=\"line\">            [<span class=\"keyword\">self</span>.widthConstraints addObject:widthConstraint];</div><div class=\"line\">            lastView = view;</div><div class=\"line\">        &#125;];</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - event response</span></div><div class=\"line\"><span class=\"comment\">//点击switch按钮，如果打开，对应视图的宽约束设置为32，否则，设置为0</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)showOrHideImage:(<span class=\"built_in\">UISwitch</span> *)sender &#123;</div><div class=\"line\">    <span class=\"built_in\">NSUInteger</span> index = (<span class=\"built_in\">NSUInteger</span>) sender.tag;</div><div class=\"line\">    MASConstraint *width = <span class=\"keyword\">self</span>.widthConstraints[index];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (sender.on) &#123;</div><div class=\"line\">        width.mas_equalTo(IMAGE_SIZE);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        width.mas_equalTo(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><ul><li><p>#####case 3: 子视图的宽度始终是父视图的四分之三（或者任意百分比）</p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//宽度为父view的宽度的四分之三 </span></div><div class=\"line\">[subView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        <span class=\"comment\">//上下左贴边</span></div><div class=\"line\">        make.left.equalTo(_containerView.mas_left);</div><div class=\"line\">        make.top.equalTo(_containerView.mas_top);</div><div class=\"line\">        make.bottom.equalTo(_containerView.mas_bottom);</div><div class=\"line\">        <span class=\"comment\">//宽度为父view的宽度的一半</span></div><div class=\"line\">        make.width.equalTo(_containerView.mas_width).multipliedBy(<span class=\"number\">0.75</span>);</div><div class=\"line\">    &#125;];</div></pre></td></tr></table></figure></li><li><p>#####case 4 给同一个属性添加多重约束，实现复杂关系</p></li></ul><pre><code class=\"objc\">\n- (<span class=\"keyword\">void</span>)layoutPageSubviews {\n\n    [<span class=\"keyword\">self</span>.greenLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.centerY.equalTo(<span class=\"keyword\">self</span>.containerView);\n        make.right.lessThanOrEqualTo(<span class=\"keyword\">self</span>.containerView);\n        make.left.greaterThanOrEqualTo(<span class=\"keyword\">self</span>.containerView.mas_right).multipliedBy((<span class=\"built_in\">CGFloat</span>)(<span class=\"number\">1.0</span>f / <span class=\"number\">3.0</span>f));\n        <span class=\"keyword\">for</span> (<span class=\"built_in\">UILabel</span> *label <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.leftLabels) {\n            make.left.greaterThanOrEqualTo(label.mas_right).offset(<span class=\"number\">8</span>);\n        }\n    }];\n\n    [<span class=\"keyword\">self</span>.greenLabel setContentCompressionResistancePriority:<span class=\"built_in\">UILayoutPriorityRequired</span> forAxis:<span class=\"built_in\">UILayoutConstraintAxisHorizontal</span>];\n}\n</code></pre><h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>通过上述分析，我们可以发现：</p><ul><li><code>AutoLayout</code>的原理就是对线性方程组或者不等式的求解，最终使用<code>frame</code>来绘制视图；</li><li>使用<code>AutoLayout</code>进行布局时， 由于其实现原理导致其时间复杂度为多项式时间，其性能损耗是仅使用 frame 的十几倍，所以在处理庞大的 UI界面时表现差强人意。</li></ul>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h5><p><code>UI</code>布局对于<code>iOS</code>开发者来说并不陌生，在<code>iOS6</code>之前，大家都是通过<code>UI</code>控件的<code>Frame</code>属性和<code>Autoresizing Mask</code>来进行<code>UI</code>布局的（简称为手动布局）。<code>AutoLayout</code>则是苹果公司在<code>iOS6</code>推出的一种基于约束的，描述性的布局系统（简称为自动布局），这里主要从四个方面来阐述iOS布局及实践。</p><ul><li>手动布局和自动布局</li><li><code>AutoLayout</code>原理</li><li><code>AutoLayout</code>的性能</li><li><code>Masnory</code>的使用</li></ul><p>首先对手动布局和自动布局做一个简单的介绍：</p><h5 id=\"手动布局和自动布局\"><a href=\"#手动布局和自动布局\" class=\"headerlink\" title=\"手动布局和自动布局\"></a>手动布局和自动布局</h5><ul><li><p>手动布局：指的是通过直接修改视图的<code>frame</code>属性的方式对界面进行布局。</p><blockquote><p>对于<code>IOS</code>的<code>app</code>开发者来说，不会像<code>Android</code>开发者一样为很多的屏幕尺寸来做界面适配，因此手动调整 <code>frame</code>的方式来布局也能工作良好。但是还是会有一些问题，如设备发生旋转、适配<code>ipad</code>等，并且保证视图原来之间的相对关系，则以上的方法都是无法解决的。如果要做这些适配，在<code>AutoLayout</code>未出来之前需要编写大量的代码，并且花费大量的调试适配时间。</p></blockquote></li><li><p>自动布局：指的是使用<code>AutoLayout</code>的方式对界面进行布局。</p></li></ul><blockquote><p><code>AutoLayout</code> 是苹果本身提倡的技术，在大部分情况下也能很好的提升开发效率，但是 <code>AutoLayout</code>对于复杂视图来说常常会产生严重的性能问题。随着视图数量的增长，<code>AutoLayout</code> 带来的 <code>CPU</code> 消耗会呈指数级上升。 如果对界面流畅度要求较高（如微博界面），可以通过提前计算好布局，在需要时一次性调整好对应属性 ，或者使用 <code>ComponentKit</code>、<code>AsyncDisplayKit</code> 等框架来处理界面布局。</p></blockquote><p>下面，我们来分析下 AutoLayout的原理。</p><h5 id=\"AutoLayout的原理\"><a href=\"#AutoLayout的原理\" class=\"headerlink\" title=\"AutoLayout的原理\"></a>AutoLayout的原理</h5><p>这里通过使用<code>Masonry</code>来进行布局，从而来分析<code>AutoLayout</code>的原理，先简要了解下<code>Masonry</code>。<br><code>Masonry</code>是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了，并具有高可读性，而且同时支持 <code>iOS</code> 和 <code>Max OS X</code>。<br><code>Masnory</code>支持的常用属性如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *left;     <span class=\"comment\">//左侧</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *top;      <span class=\"comment\">//上侧</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *right;   <span class=\"comment\">//右侧</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *bottom;   <span class=\"comment\">//下侧</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *leading;  <span class=\"comment\">//首部</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *trailing;  <span class=\"comment\">//首部</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *width;    <span class=\"comment\">//宽</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *height;   <span class=\"comment\">//高</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *centerX;  <span class=\"comment\">//横向中点</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *centerY;  <span class=\"comment\">//纵向中点</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) MASConstraint *baseline; <span class=\"comment\">//文本基线</span></div></pre></td></tr></table></figure><p></p><p><strong>其中<code>leading</code>与<code>left</code>，<code>trailing</code>与<code>right</code> 在正常情况下是等价的，但是当一些布局是从右至左时(比如阿拉伯语) 则会对调。</strong><br>同时，在<code>Masonry</code>中能够添加<code>AutoLayout</code>约束有三个函数：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_makeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;<span class=\"comment\">//只负责新增约束` AutoLayout`不能同时存在两条针对于同一对象的约束,否则会报错</span></div><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_updateConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;<span class=\"comment\">//针对上面的情况 会更新在block中出现的约束 不会导致出现两个相同约束的情况</span></div><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_remakeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;<span class=\"comment\">//则会清除之前的所有约束 仅保留最新的约束</span></div></pre></td></tr></table></figure><p></p><p>我们在代码中，经常会使用到<code>equalTo</code>和<code>mas_equalTo</code>，那它们的区别是什么呢？从代码中找到他们的定义如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#define mas_equalTo(...)                 equalTo(MASBoxValue((__VA_ARGS__)))</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">#define MASBoxValue(value) _MASBoxValue(@encode(__typeof__((value))), (value))</span></div></pre></td></tr></table></figure><p></p><p>可以看到 <code>mas_equalTo</code>只是对其参数进行了一个<code>BOX</code>操作(装箱) ，所支持的类型，除了<code>NSNumber</code>支持的那些数值类型之外，还支持<code>CGPoint</code>，<code>CGSize</code>和<code>UIEdgeInsets</code>类型。<br>下面，我们通过一个例子，一步步来看下界面是怎么布局的，代码如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIView</span> *v1 = [[<span class=\"built_in\">UIView</span> alloc] init];</div><div class=\"line\">    v1.backgroundColor = [<span class=\"built_in\">UIColor</span> orangeColor];</div><div class=\"line\">    [v1 showPlaceHolder];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIView</span> *v2 = [[<span class=\"built_in\">UIView</span> alloc] init];</div><div class=\"line\">    v2.backgroundColor = [<span class=\"built_in\">UIColor</span> orangeColor];</div><div class=\"line\">    [v2 showPlaceHolder];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIView</span> *v3 = [[<span class=\"built_in\">UIView</span> alloc] init];</div><div class=\"line\">    v3.backgroundColor = [<span class=\"built_in\">UIColor</span> orangeColor];</div><div class=\"line\">    [v3 showPlaceHolder];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:v1];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:v2];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:v3];</div><div class=\"line\">    </div><div class=\"line\">    [v1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.mas_equalTo(<span class=\"number\">100</span>);</div><div class=\"line\">        make.leading.mas_equalTo(<span class=\"number\">100</span>);</div><div class=\"line\">        make.width.mas_equalTo(<span class=\"number\">70</span>);</div><div class=\"line\">        make.height.mas_equalTo(<span class=\"number\">65</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [v2 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.equalTo(v1.mas_top);</div><div class=\"line\">        make.leading.mas_equalTo(v1.mas_trailing).offset(<span class=\"number\">20</span>);</div><div class=\"line\">        make.width.equalTo(v1.mas_width);</div><div class=\"line\">        make.height.equalTo(v1.mas_height);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [v3 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.equalTo(v1.mas_bottom).offset(<span class=\"number\">20</span>);</div><div class=\"line\">        make.leading.equalTo(v1.mas_leading);</div><div class=\"line\">        make.trailing.equalTo(v2.mas_trailing);</div><div class=\"line\">        make.height.equalTo(v1.mas_height);</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>界面运行结果如下图：<br><img src=\"http://upload-images.jianshu.io/upload_images/5835116-10acd4fa0c0e292c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"CD52E302-FAFD-4D6E-9DFF-F5DB44C6098B.png\"><br>下面，我们将界面中的左上角的视图视为视图1，右上角的视图视为视图2，底部视图视为视图3，使用<code>x1、y1、m1、n1</code>来标识视图1的<code>left</code>、<code>top</code>、<code>width</code>和<code>height</code>，以此类推。<br>通过以上举例抽象出自动布局数学公式：<br><img src=\"http://upload-images.jianshu.io/upload_images/5835116-6ceec51e08a7f571.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1C7344E7-1ED1-421A-B84E-ACBD70F98859.png\"><br>将以上等式变形为：</p><p><img src=\"http://upload-images.jianshu.io/upload_images/5835116-101854d5027207fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"8AAD54BE-0157-4591-A117-0094F69BE6E7.png\"><br>此时，以上方程组，大家肯定很熟悉了，也就是《线性代数》中的线性方程组，现在将以上线性方程组抽象为：</p><p><img src=\"http://upload-images.jianshu.io/upload_images/5835116-665ec9939aa6a902.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"B5E84F57-07DE-4A15-9D06-3D0ADD7E6EBD.png\"><br>上图表示“等式”方程组，那么是否还可以继续抽象？也就是说上述方程组能否完全表示未知元素之间与已知元素之间的关系，显然还不全面，因为还有（&lt;,&gt;,&lt;=,&gt;=）不等关系，因此将“=”等号抽象为关系”R”,在数学上关系R也就包括了“=”,”&lt;”,”&gt;”,”&lt;=”,”&gt;=”等关系。上述线程方程组变形为：（实质上，AutoLayout中所有的约束确实都是用数学关系式y R ax + b描述）</p><p><img src=\"http://upload-images.jianshu.io/upload_images/5835116-8ae25f0ead6f4c29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"9A877277-5DEB-437C-AEF6-D6530AB6FE6F.png\"><br>现在已经将自动布局一步步抽象为数学公式，那么对视图的布局其实就是对线性方程组的求解。线性方程组解的情况有三种，实质上也对应着自动布局对视图的三种布局方案:</p><ul><li>唯一解：所有方程中的未知数能够解出唯一解。 充分约束：给一个视图添加的约束必须是充分的，才能正确布局一个视图；</li><li>多个解：未知数不能求解出准确的唯一解，即未知数可能存在多个或者无限个解满足线性方程组。 欠约束：给视图所添加的约束不能够充分的表达视图的准确位置，在这种情况下自动布局会随意给视图一个布局方案，也就是自动布局中视图不能够正确布局或者视图丢失的情况。</li><li>无解：不存在满足线性方程组的解。 冲突约束：给视图添加的约束表达视图布局出现了冲突，比如同时满足同一个视图宽度即为100又为200，这是不可能存在的。此时程序会出现崩溃。</li></ul><p>通过以上描述，将<code>AutoLayout</code>系统的作用描述如图所示：</p><p><img src=\"http://upload-images.jianshu.io/upload_images/5835116-55978c66c8eea66b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"FBB5F53F-0B23-48B2-B150-39B405BFB335.png\"></p><h5 id=\"AutoLayout的性能\"><a href=\"#AutoLayout的性能\" class=\"headerlink\" title=\"AutoLayout的性能\"></a><code>AutoLayout</code>的性能</h5><p>从<code>AutoLayout</code>的原理，我们可以得出布局系统最后仍然需要通过<code>frame</code>来进行布局，相比原有的布局系统加入了从约束计算 出<code>frame</code> 的过程,那么这个过程对性能是否会影响呢？<br>你可以在 <a href=\"https://github.com/hua16/summary\" target=\"_blank\" rel=\"external\"><strong>这里</strong></a> 找到这次对 <code>Layout</code> 性能测量使用的代码。<br>代码分别使用<code>Auto Layout</code>、嵌套视图层级中使用 <code>Auto Layout</code>和<code>frame</code>对 <code>N</code> 个视图进行布局，测算其运行时间。</p><p>对视图数量在 1~35 之间布局时间进行测量，结果如下：</p><p><img src=\"http://upload-images.jianshu.io/upload_images/117999-045780ced38306d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"视图数量范围为 1~35.png\"></p><p>对视图数量在 10~500 之间布局时间进行测量，结果如下：</p><p><img src=\"http://upload-images.jianshu.io/upload_images/117999-4a5f70dd55e894d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"视图数量范围为 10~500.png\"><br>从上述的测试数据可以看出，<strong>使用<code>frame</code>、<code>AutoLayout</code>和嵌套视图层级中使用 <code>Auto Layout</code>进行布局、对应的视图数量分别为<code>50</code>个、<code>6</code>个和<code>12</code>个，所需要的时间就会在 <code>16.67 ms</code>左右。</strong>,而想要让 iOS 应用的视图保持 60 FPS 的刷新频率，我们必须在 1/60 = 16.67 ms 之内完成包括布局、绘制以及渲染等操作。<br>综上所述，虽然说 <code>Auto Layout</code> 为开发者在多尺寸布局上提供了遍历，而且支持跨越视图层级的约束，但是由于其实现原理导致其时间复杂度为<strong>多项式时间</strong>，其性能损耗是仅使用 <code>frame</code> 的十几倍，所以在处理庞大的 <code>UI</code>界面时表现差强人意。</p><h5 id=\"Masnory的使用\"><a href=\"#Masnory的使用\" class=\"headerlink\" title=\"Masnory的使用\"></a><code>Masnory</code>的使用</h5><p>下面，我们通过4个实例，来了解下<code>Masnory</code>的使用。</p><ul><li>######case 1: 并排显示两个<code>label</code>，宽度由内容决定。父视图宽度不够时，优先显示右边<code>label</code>的内容。</li></ul><p>在默认情况下，我们没有设置各个布局的优先级，那么他就会优先显示左边的<code>label</code>，左边的完全显示后剩余的空间都是右边的<code>label</code>，如果整个空间宽度都不够左边的<code>label</code>的话，那么右边的<code>label</code>就没有显示的机会了。<br>如果我们现在的需求是优先显示右边的<code>label</code>，左边的<code>label</code>内容超出的省略，这时就需要我们调整约束的优先级了。<br><code>UIView</code>中关于<code>Content Hugging</code> 和<code>Content Compression Resistance</code>的方法有：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">UILayoutPriority</span>)contentHuggingPriorityForAxis:(<span class=\"built_in\">UILayoutConstraintAxis</span>)axis <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0);</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setContentHuggingPriority:(<span class=\"built_in\">UILayoutPriority</span>)priority forAxis:(<span class=\"built_in\">UILayoutConstraintAxis</span>)axis <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0);</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">UILayoutPriority</span>)contentCompressionResistancePriorityForAxis:(<span class=\"built_in\">UILayoutConstraintAxis</span>)axis <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0);</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setContentCompressionResistancePriority:(<span class=\"built_in\">UILayoutPriority</span>)priority forAxis:(<span class=\"built_in\">UILayoutConstraintAxis</span>)axis <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0);</div></pre></td></tr></table></figure><p></p><p>那么这两个东西到底是什么呢？可以这样形象的理解一下：</p><ul><li><code>contentHugging</code>: 抱住使其在“内容大小”的基础上不能继续变大，这个属性的优先级越高，就要越“抱紧”视图里面的内容。也就是视图的大小不会随着父视图的扩大而扩大。</li><li><code>contentCompression</code>: 撑住使其在在其“内容大小”的基础上不能继续变小,这个属性的优先级越高，越不“容易”被压缩。也就是说，当整体的空间装不下所有的视图时，<code>Content Compression Resistance</code>优先级越高的，显示的内容越完整。<br>这两个属性分别可以设置水平方向和垂直方向上的，而且一个默认优先级是250， 一个默认优先级是750. 因为这两个很有可能与其他Constraint冲突，所以优先级较低。</li></ul><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"built_in\">UILayoutPriority</span> <span class=\"built_in\">UILayoutPriorityRequired</span> <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0) = <span class=\"number\">1000</span>; <span class=\"comment\">// A required constraint.  Do not exceed this.</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"built_in\">UILayoutPriority</span> <span class=\"built_in\">UILayoutPriorityDefaultHigh</span> <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0) = <span class=\"number\">750</span>; <span class=\"comment\">// This is the priority level with which a button resists compressing its content.</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"built_in\">UILayoutPriority</span> <span class=\"built_in\">UILayoutPriorityDefaultLow</span> <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0) = <span class=\"number\">250</span>; <span class=\"comment\">// This is the priority level at which a button hugs its contents horizontally.</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"built_in\">UILayoutPriority</span> <span class=\"built_in\">UILayoutPriorityFittingSizeLevel</span> <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">6</span>_0) = <span class=\"number\">50</span>;</div></pre></td></tr></table></figure><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)layoutPageSubViews &#123;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.leftLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.equalTo(<span class=\"keyword\">self</span>.contentView1.mas_top).with.offset(<span class=\"number\">5</span>);</div><div class=\"line\">        make.left.equalTo(<span class=\"keyword\">self</span>.contentView1.mas_left).with.offset(<span class=\"number\">2</span>);</div><div class=\"line\">        make.height.equalTo(@<span class=\"number\">40</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.rightLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.left.equalTo(<span class=\"keyword\">self</span>.leftLabel.mas_right).with.offset(<span class=\"number\">2</span>);</div><div class=\"line\">        make.top.equalTo(<span class=\"keyword\">self</span>.contentView1.mas_top).with.offset(<span class=\"number\">5</span>);</div><div class=\"line\">        make.right.lessThanOrEqualTo(<span class=\"keyword\">self</span>.contentView1.mas_right).with.offset(<span class=\"number\">-2</span>);</div><div class=\"line\">        make.height.equalTo(@<span class=\"number\">40</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.leftLabel setContentHuggingPriority:<span class=\"built_in\">UILayoutPriorityRequired</span></div><div class=\"line\">                               forAxis:<span class=\"built_in\">UILayoutConstraintAxisHorizontal</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.leftLabel setContentCompressionResistancePriority:<span class=\"built_in\">UILayoutPriorityDefaultLow</span></div><div class=\"line\">                                             forAxis:<span class=\"built_in\">UILayoutConstraintAxisHorizontal</span>];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.rightLabel setContentHuggingPriority:<span class=\"built_in\">UILayoutPriorityRequired</span></div><div class=\"line\">                               forAxis:<span class=\"built_in\">UILayoutConstraintAxisHorizontal</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.rightLabel setContentCompressionResistancePriority:<span class=\"built_in\">UILayoutPriorityRequired</span></div><div class=\"line\">                                             forAxis:<span class=\"built_in\">UILayoutConstraintAxisHorizontal</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><ul><li>######case 2: 四个<code>ImageView</code>整体居中，可以任意显示、隐藏。</li></ul><p><img src=\"http://upload-images.jianshu.io/upload_images/5835116-1334685bb89094f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"blog_autolayout_example_with_masonry_3.png\"></p><p>下面的四个<code>Switch</code>控件分别控制上面对应位置的图片是否显示。</p><blockquote><p>分析:首先就是整体居中，为了实现这个，最简单的办法就是将四个图片“装进”一个<strong>容器View</strong>里面，然后让这个容器<code>View</code>在整个页面中居中即可。这样就不用控制每个图片的居中效果了。<br>然后就是显示与隐藏。在这里我直接控制图片<code>ImageView</code>的宽度，宽度为0的时候不就“隐藏”了吗。</p></blockquote><p>具体代码如下：</p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)layoutPageSubViews &#123;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.containerView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.height.mas_equalTo(IMAGE_SIZE);</div><div class=\"line\">        make.centerX.equalTo(<span class=\"keyword\">self</span>.view.mas_centerX);</div><div class=\"line\">        make.top.equalTo(<span class=\"keyword\">self</span>.view.mas_top).offset(<span class=\"number\">200</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//分别设置每个imageView的宽高、左边、垂直中心约束，注意约束的对象</span></div><div class=\"line\">    <span class=\"comment\">//每个View的左边约束和左边的View的右边相等</span></div><div class=\"line\">    __block <span class=\"built_in\">UIView</span> *lastView = <span class=\"literal\">nil</span>;</div><div class=\"line\">    __block MASConstraint *widthConstraint = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"built_in\">NSUInteger</span> arrayCount = <span class=\"keyword\">self</span>.imageViews.count;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.imageViews enumerateObjectsUsingBlock:^(<span class=\"built_in\">UIView</span> *view, <span class=\"built_in\">NSUInteger</span> idx, <span class=\"built_in\">BOOL</span> *stop) &#123;</div><div class=\"line\">        [view mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">            make.left.equalTo(lastView ? lastView.mas_right : view.superview.mas_left);</div><div class=\"line\">            make.centerY.equalTo(view.superview.mas_centerY);</div><div class=\"line\">            <span class=\"keyword\">if</span> (idx == arrayCount - <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                make.right.equalTo(view.superview.mas_right);</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            widthConstraint = make.width.mas_equalTo(IMAGE_SIZE);</div><div class=\"line\">            make.height.mas_equalTo(IMAGE_SIZE);</div><div class=\"line\">            </div><div class=\"line\">            [<span class=\"keyword\">self</span>.widthConstraints addObject:widthConstraint];</div><div class=\"line\">            lastView = view;</div><div class=\"line\">        &#125;];</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - event response</span></div><div class=\"line\"><span class=\"comment\">//点击switch按钮，如果打开，对应视图的宽约束设置为32，否则，设置为0</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)showOrHideImage:(<span class=\"built_in\">UISwitch</span> *)sender &#123;</div><div class=\"line\">    <span class=\"built_in\">NSUInteger</span> index = (<span class=\"built_in\">NSUInteger</span>) sender.tag;</div><div class=\"line\">    MASConstraint *width = <span class=\"keyword\">self</span>.widthConstraints[index];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (sender.on) &#123;</div><div class=\"line\">        width.mas_equalTo(IMAGE_SIZE);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        width.mas_equalTo(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><ul><li><p>#####case 3: 子视图的宽度始终是父视图的四分之三（或者任意百分比）</p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//宽度为父view的宽度的四分之三 </span></div><div class=\"line\">[subView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        <span class=\"comment\">//上下左贴边</span></div><div class=\"line\">        make.left.equalTo(_containerView.mas_left);</div><div class=\"line\">        make.top.equalTo(_containerView.mas_top);</div><div class=\"line\">        make.bottom.equalTo(_containerView.mas_bottom);</div><div class=\"line\">        <span class=\"comment\">//宽度为父view的宽度的一半</span></div><div class=\"line\">        make.width.equalTo(_containerView.mas_width).multipliedBy(<span class=\"number\">0.75</span>);</div><div class=\"line\">    &#125;];</div></pre></td></tr></table></figure></li><li><p>#####case 4 给同一个属性添加多重约束，实现复杂关系</p></li></ul><pre><code class=\"objc\">\n- (<span class=\"keyword\">void</span>)layoutPageSubviews {\n\n    [<span class=\"keyword\">self</span>.greenLabel mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.centerY.equalTo(<span class=\"keyword\">self</span>.containerView);\n        make.right.lessThanOrEqualTo(<span class=\"keyword\">self</span>.containerView);\n        make.left.greaterThanOrEqualTo(<span class=\"keyword\">self</span>.containerView.mas_right).multipliedBy((<span class=\"built_in\">CGFloat</span>)(<span class=\"number\">1.0</span>f / <span class=\"number\">3.0</span>f));\n        <span class=\"keyword\">for</span> (<span class=\"built_in\">UILabel</span> *label <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.leftLabels) {\n            make.left.greaterThanOrEqualTo(label.mas_right).offset(<span class=\"number\">8</span>);\n        }\n    }];\n\n    [<span class=\"keyword\">self</span>.greenLabel setContentCompressionResistancePriority:<span class=\"built_in\">UILayoutPriorityRequired</span> forAxis:<span class=\"built_in\">UILayoutConstraintAxisHorizontal</span>];\n}\n</code></pre><h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>通过上述分析，我们可以发现：</p><ul><li><code>AutoLayout</code>的原理就是对线性方程组或者不等式的求解，最终使用<code>frame</code>来绘制视图；</li><li>使用<code>AutoLayout</code>进行布局时， 由于其实现原理导致其时间复杂度为多项式时间，其性能损耗是仅使用 frame 的十几倍，所以在处理庞大的 UI界面时表现差强人意。</li></ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj9r4ahld00002npwdqfgpgm4","category_id":"cj9r4ahly00042npwpy3n6ohc","_id":"cj9r4ahmf000b2npw2wti7dom"},{"post_id":"cj9r4ahlp00022npwtdzuvmk6","category_id":"cj9r4ahmb00082npw92gprau6","_id":"cj9r4ahmg000d2npwf5kx5g8a"}],"PostTag":[{"post_id":"cj9r4ahld00002npwdqfgpgm4","tag_id":"cj9r4ahm400052npwlwjsat3a","_id":"cj9r4ahme000a2npweajybtrg"},{"post_id":"cj9r4ahlp00022npwtdzuvmk6","tag_id":"cj9r4ahmc00092npwbzd7b9xh","_id":"cj9r4ahmg000c2npw7e11wznd"}],"Tag":[{"name":"二维码 图片识别","_id":"cj9r4ahm400052npwlwjsat3a"},{"name":"自动布局 AutoLayout Masnory","_id":"cj9r4ahmc00092npwbzd7b9xh"}]}}